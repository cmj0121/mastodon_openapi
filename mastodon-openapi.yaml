openapi: 3.1.0
info:
  title: Mastodon OpenAPI API
  version: 0.1.0
  summary: The self-hosted Mastodon OpenAPI specifcation
  description: '

    The official Mastodon API documentation is available at https://docs.joinmastodon.org/api/
    but

    it does not provide an OpenAPI specification. This script generates an OpenAPI
    specification

    from the website.

    '
  license:
    name: MIT
paths:
  /api/v1/apps/verify_credentials:
    get:
      tags:
      - apps
      summary: "Confirm that the app\u2019s OAuth2 credentials work."
      description: "Confirm that the app\u2019s OAuth2 credentials work.\n## Version\
        \ history\n\n- 2.0.0 - added\n- 2.7.2 - now returns vapid_key\n- 4.3.0 - deprecated\
        \ vapid_key, please see api/v2/instance\n- 4.3.0 - removed needing read scope\
        \ to access this API, now any valid App token can be used\n- 4.3.0 - added\
        \ scopes and redirect_uris properties\n\n[Verify your app works](https://docs.joinmastodon.org/methods/apps/#verify_credentials)"
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: If the Authorization header was provided with a valid token,
            you should see your app returned as an Application entity.
        401:
          $ref: '#/components/responses/Error'
          description: If the Authorization header contains an invalid token, is malformed,
            or is not present, an error will be returned indicating an authorization
            failure.
      security:
      - BearerAuth: []
  /api/v1/apps:
    post:
      tags:
      - apps
      summary: Create a new application to obtain OAuth2 credentials.
      description: 'Create a new application to obtain OAuth2 credentials.

        ## Version history


        - 0.0.0 - added

        - 2.7.2 - now returns vapid_key

        - 4.3.0 - deprecated vapid_key, please see api/v2/instance

        - 4.3.0 - added support for multiple redirect_uris in Form data parameters

        - 4.3.0 - added redirect_uris response property

        - 4.3.0 - deprecated redirect_uri response property, since this can be a non-URI
        if multiple redirect_uris are registered, use redirect_uris instead

        - 4.3.0 - changed entity type from Application to CredentialApplication


        [Create an application](https://docs.joinmastodon.org/methods/apps/#create)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Store the client_id and client_secret in your cache, as these
            will be used to obtain OAuth tokens.
        422:
          $ref: '#/components/responses/Error'
          description: If a required parameter is missing or improperly formatted,
            the request will fail.
  /.well-known/oauth-authorization-server:
    get:
      tags:
      - oauth
      summary: Returns the OAuth 2 Authorization Server Metadata for the Mastodon
        server, as defined by RFC 8414.
      description: "Returns the OAuth 2 Authorization Server Metadata for the Mastodon\
        \ server, as defined by RFC 8414.\nWe include the additional non-standard\
        \ property of app_registration_endpoint which refers to the POST /api/v1/apps\
        \ endpoint, since we don\u2019t currently support the standard registration_endpoint\
        \ endpoint for Dynamic Client Registration.\nThe properties exposed by this\
        \ endpoint can help you better integrate with the Mastodon API, such as allowing\
        \ for negotiation of scopes across different versions of Mastodon.\n## Version\
        \ history\n\n- 4.3.0 - added\n\n[Discover OAuth Server Configuration](https://docs.joinmastodon.org/methods/oauth/#authorization-server-metadata)"
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: On Mastodon versions before 4.3.0, requesting this endpoint
            will result in a 404 Not Found error.
        404:
          $ref: '#/components/responses/Error'
          description: On Mastodon versions before 4.3.0, requesting this endpoint
            will result in a 404 Not Found error.
  /oauth/revoke:
    post:
      tags:
      - oauth
      summary: Revoke an access token to make it no longer valid for use.
      description: 'Revoke an access token to make it no longer valid for use.

        ## Version history


        - 0.1.0 - added


        [Revoke a token](https://docs.joinmastodon.org/methods/oauth/#revoke)'
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: If you own the provided token, the API call will provide an
            empty response. This operation is idempotent, so calling this API multiple
            times will still return OK.
        403:
          $ref: '#/components/responses/Error'
          description: If you provide a token you do not own, or no token at all,
            the API call will return a 403 error.
  /oauth/token:
    post:
      tags:
      - oauth
      summary: Obtain an access token, to be used during API calls that are not public.
      description: 'Obtain an access token, to be used during API calls that are not
        public.

        ## Version history


        - 0.1.0 - added

        - 4.3.0 - added support for PKCE parameter


        [Obtain a token](https://docs.joinmastodon.org/methods/oauth/#token)'
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Store this access_token for later use with methods that require
            authentication. The token should be passed as an HTTP Authorization header
            when making API calls, with the value Bearer <access_token>
        400:
          $ref: '#/components/responses/Error'
          description: If you try to request a scope that was not included when registering
            the app, the request will fail.
        401:
          $ref: '#/components/responses/Error'
          description: If client_id and client_secret do not match or are invalid,
            the request will fail.
  /oauth/authorize:
    get:
      tags:
      - oauth
      summary: Displays an authorization form to the user. If approved, it will create
        and return an authorization code, then redirect to the desired redirect_uri,
        or show the authorization code if urn:ietf:wg:oauth:2.0:oob was requested.
        The authorization code can be used while requesting a token to obtain access
        to user-level methods.
      description: 'Displays an authorization form to the user. If approved, it will
        create and return an authorization code, then redirect to the desired redirect_uri,
        or show the authorization code if urn:ietf:wg:oauth:2.0:oob was requested.
        The authorization code can be used while requesting a token to obtain access
        to user-level methods.

        ## Version history


        - 0.1.0 - added

        - 2.6.0 - added force_login

        - 3.5.0 - added lang

        - 4.3.0 - added support for PKCE parameters


        [Authorize a user](https://docs.joinmastodon.org/methods/oauth/#authorize)'
      parameters:
      - name: response_type
        in: query
        description: required String. Should be set equal to code.
        required: true
        schema:
          type: string
      - name: client_id
        in: query
        description: required String. The client ID, obtained during app registration.
        required: true
        schema:
          type: string
      - name: redirect_uri
        in: query
        description: required String. Set a URI to redirect the user to. If this parameter
          is set to urn:ietf:wg:oauth:2.0:oob then the authorization code will be
          shown instead. Must match one of the redirect_uris declared during app registration.
        required: true
        schema:
          type: string
      - name: scope
        in: query
        description: String. List of requested OAuth scopes, separated by spaces (or
          by pluses, if using query parameters). Must be a subset of scopes declared
          during app registration. If not provided, defaults to read.
        schema:
          type: string
      - name: state
        in: query
        description: String. Arbitrary value to passthrough to your server when the
          user authorizes or rejects the authorization request.
        schema:
          type: string
      - name: code_challenge
        in: query
        description: String. The PKCE code challenge for the authorization request.
        schema:
          type: string
      - name: code_challenge_method
        in: query
        description: String. Must be S256, as this is the only code challenge method
          that is supported by Mastodon for PKCE.
        schema:
          type: string
      - name: force_login
        in: query
        description: Boolean. Forces the user to re-login, which is necessary for
          authorizing with multiple accounts from the same instance.
        schema:
          type: string
      - name: lang
        in: query
        description: String. The ISO 639-1 two-letter language code to use while rendering
          the authorization form.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The authorization code will be returned as a query parameter
            named code.
        400:
          $ref: '#/components/responses/Error'
          description: If the authorization code is incorrect or has been used already,
            the request will fail.
  /api/v1/emails/confirmations:
    post:
      tags:
      - emails
      summary: "Resend a new confirmation email. If an email is provided, updates\
        \ the unconfirmed user\u2019s email before resending the confirmation email."
      description: "Resend a new confirmation email. If an email is provided, updates\
        \ the unconfirmed user\u2019s email before resending the confirmation email.\n\
        ## Version history\n\n- 3.4.0 - added\n\n[Resend confirmation email](https://docs.joinmastodon.org/methods/emails/#confirmation)"
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The client associated with the token does not own the unconfirmed
            user.
        403:
          $ref: '#/components/responses/Error'
          description: The client associated with the token does not own the unconfirmed
            user.
      security:
      - BearerAuth: []
  /api/v1/accounts/:id/identity_proofs:
    get:
      tags:
      - accounts
      description: '

        ## Version history


        - 2.8.0 - added

        - 3.5.0 - deprecated. now returns an empty array.


        [Identity proofs deprecated](https://docs.joinmastodon.org/methods/accounts/#identity_proofs)'
      deprecated: true
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Account does not exist
        404:
          $ref: '#/components/responses/Error'
          description: Account does not exist
        410:
          $ref: '#/components/responses/Error'
          description: Account is suspended (since 2.4.0 and until 3.3.0)
        422:
          $ref: '#/components/responses/Error'
          description: Token does not have an authorized user
  /api/v1/accounts/lookup:
    get:
      tags:
      - accounts
      summary: Quickly lookup a username to see if it is available, skipping WebFinger
        resolution.
      description: 'Quickly lookup a username to see if it is available, skipping
        WebFinger resolution.

        ## Version history


        - 3.4.0 - added


        [Lookup account ID from Webfinger address](https://docs.joinmastodon.org/methods/accounts/#lookup)'
      parameters:
      - name: acct
        in: query
        description: required String. The username or Webfinger address to lookup.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Sample call with ?acct=trwnh
        404:
          $ref: '#/components/responses/Error'
          description: Username or address does not map to an account
  /api/v1/accounts/search:
    get:
      tags:
      - accounts
      summary: Search for matching accounts by username or display name.
      description: 'Search for matching accounts by username or display name.

        ## Version history


        - 0.0.0 - added

        - 2.8.0 - add limit, offset and following


        [Search for matching accounts](https://docs.joinmastodon.org/methods/accounts/#search)'
      parameters:
      - name: q
        in: query
        description: required String. Search query for accounts.
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results. Defaults to 40 accounts.
          Max 80 accounts.
        schema:
          type: string
      - name: offset
        in: query
        description: Integer. Skip the first n results.
        schema:
          type: string
      - name: resolve
        in: query
        description: Boolean. Attempt WebFinger lookup. Defaults to false. Use this
          when q is an exact address.
        schema:
          type: string
      - name: following
        in: query
        description: Boolean. Limit the search to users you are following. Defaults
          to false.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: "Accounts matching \u201Ctrwnh\u201D in username or display\
            \ name"
        503:
          $ref: '#/components/responses/Error'
          description: resolve=true, but the domain part of the user@domain address
            is not a currently live website
      security:
      - BearerAuth: []
  /api/v1/accounts/familiar_followers:
    get:
      tags:
      - accounts
      summary: Obtain a list of all accounts that follow a given account, filtered
        for accounts you follow.
      description: 'Obtain a list of all accounts that follow a given account, filtered
        for accounts you follow.

        ## Version history


        - 3.5.0 - added


        [Find familiar followers](https://docs.joinmastodon.org/methods/accounts/#familiar_followers)'
      parameters:
      - name: id[]
        in: query
        description: Array of String. Find familiar followers for the provided account
          IDs.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Sample call with id[]=1&id[]=2
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header
        422:
          $ref: '#/components/responses/Error'
          description: Token does not have an authorized user
      security:
      - BearerAuth: []
  /api/v1/accounts/relationships:
    get:
      tags:
      - accounts
      summary: Find out whether a given account is followed, blocked, muted, etc.
      description: 'Find out whether a given account is followed, blocked, muted,
        etc.

        ## Version history


        - 0.0.0 - added

        - 4.3.0 - added with_suspended parameter


        [Check relationships to other accounts](https://docs.joinmastodon.org/methods/accounts/#relationships)'
      parameters:
      - name: id[]
        in: query
        description: Array of String. Check relationships for the provided account
          IDs.
        schema:
          type: string
      - name: with_suspended
        in: query
        description: Boolean. Whether relationships should be returned for suspended
          users, defaults to false.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Sample call with id[]=1&id[]=2
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header
        422:
          $ref: '#/components/responses/Error'
          description: Token does not have an authorized user
      security:
      - BearerAuth: []
  /api/v1/accounts/:id/note:
    post:
      tags:
      - accounts
      summary: Sets a private note on a user.
      description: 'Sets a private note on a user.

        ## Version history


        - 3.2.0 - added


        [Set private note on profile](https://docs.joinmastodon.org/methods/accounts/#note)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Successfully updated profile note
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header
        422:
          $ref: '#/components/responses/Error'
          description: Token does not have an authorized user
      security:
      - BearerAuth: []
  /api/v1/accounts/:id/unpin:
    post:
      tags:
      - accounts
      summary: "Remove the given account from the user\u2019s featured profiles."
      description: "Remove the given account from the user\u2019s featured profiles.\n\
        ## Version history\n\n- 2.5.0 - added\n\n[Unfeature account from profile](https://docs.joinmastodon.org/methods/accounts/#unpin)"
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Successfully unendorsed, or account was already not endorsed
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header
        422:
          $ref: '#/components/responses/Error'
          description: Token does not have an authorized user
      security:
      - BearerAuth: []
  /api/v1/accounts/:id/pin:
    post:
      tags:
      - accounts
      summary: "Add the given account to the user\u2019s featured profiles. (Featured\
        \ profiles are currently shown on the user\u2019s own public profile.)"
      description: "Add the given account to the user\u2019s featured profiles. (Featured\
        \ profiles are currently shown on the user\u2019s own public profile.)\n##\
        \ Version history\n\n- 2.5.0 - added\n- 4.0.0 - calling this method is now\
        \ idempotent\n\n[Feature account on your profile](https://docs.joinmastodon.org/methods/accounts/#pin)"
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Successfully endorsed, or was already endorsing.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header
        403:
          $ref: '#/components/responses/Error'
          description: Token is missing a required scope
        422:
          $ref: '#/components/responses/Error'
          description: You are not following this account
        500:
          $ref: '#/components/responses/Error'
          description: Can sometimes be returned if the account already endorsed.
      security:
      - BearerAuth: []
  /api/v1/accounts/:id/unmute:
    post:
      tags:
      - accounts
      summary: Unmute the given account.
      description: 'Unmute the given account.

        ## Version history


        - 0.0.0 - added

        - 3.5.0 - deprecated follow scope. now additionally accepts write


        [Unmute account](https://docs.joinmastodon.org/methods/accounts/#unmute)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Successfully unmuted, or account was already unmuted
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header
        422:
          $ref: '#/components/responses/Error'
          description: Token does not have an authorized user
      security:
      - BearerAuth: []
  /api/v1/accounts/:id/mute:
    post:
      tags:
      - accounts
      summary: Mute the given account. Clients should filter statuses and notifications
        from this account, if received (e.g. due to a boost in the Home timeline).
      description: 'Mute the given account. Clients should filter statuses and notifications
        from this account, if received (e.g. due to a boost in the Home timeline).

        ## Version history


        - 0.0.0 - added

        - 3.3.0 - added duration

        - 3.5.0 - deprecated follow scope. now additionally accepts write


        [Mute account](https://docs.joinmastodon.org/methods/accounts/#mute)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Successfully muted, or account was already muted. Note that
            you can call this API method again with notifications=false to update
            the relationship so that only statuses are muted.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header
        422:
          $ref: '#/components/responses/Error'
          description: Token does not have an authorized user
      security:
      - BearerAuth: []
  /api/v1/accounts/:id/unblock:
    post:
      tags:
      - accounts
      summary: Unblock the given account.
      description: 'Unblock the given account.

        ## Version history


        - 0.0.0 - added

        - 3.5.0 - deprecated follow scope. now additionally accepts write


        [Unblock account](https://docs.joinmastodon.org/methods/accounts/#unblock)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Successfully unblocked, or account was already not blocked
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header
        422:
          $ref: '#/components/responses/Error'
          description: Token does not have an authorized user
      security:
      - BearerAuth: []
  /api/v1/accounts/:id/block:
    post:
      tags:
      - accounts
      summary: Block the given account. Clients should filter statuses from this account
        if received (e.g. due to a boost in the Home timeline)
      description: 'Block the given account. Clients should filter statuses from this
        account if received (e.g. due to a boost in the Home timeline)

        ## Version history


        - 0.0.0 - added

        - 3.5.0 - deprecated follow scope. now additionally accepts write


        [Block account](https://docs.joinmastodon.org/methods/accounts/#block)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Successfully blocked, or account was already blocked
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header
        422:
          $ref: '#/components/responses/Error'
          description: Token does not have an authorized user
      security:
      - BearerAuth: []
  /api/v1/accounts/:id/remove_from_followers:
    post:
      tags:
      - accounts
      summary: Remove the given account from your followers.
      description: 'Remove the given account from your followers.

        ## Version history


        - 3.5.0 - added


        [Remove account from followers](https://docs.joinmastodon.org/methods/accounts/#remove_from_followers)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Successfully removed from followers, or account was already
            not following you
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header
        422:
          $ref: '#/components/responses/Error'
          description: Token does not have an authorized user
      security:
      - BearerAuth: []
  /api/v1/accounts/:id/unfollow:
    post:
      tags:
      - accounts
      summary: Unfollow the given account.
      description: 'Unfollow the given account.

        ## Version history


        - 0.0.0 - added

        - 3.5.0 - deprecated follow scope. now additionally accepts write


        [Unfollow account](https://docs.joinmastodon.org/methods/accounts/#unfollow)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Successfully unfollowed, or account was already not followed
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header
        422:
          $ref: '#/components/responses/Error'
          description: Token does not have an authorized user
      security:
      - BearerAuth: []
  /api/v1/accounts/:id/follow:
    post:
      tags:
      - accounts
      summary: Follow the given account. Can also be used to update whether to show
        reblogs or enable notifications.
      description: 'Follow the given account. Can also be used to update whether to
        show reblogs or enable notifications.

        ## Version history


        - 0.0.0 - added

        - 3.3.0 - added notify

        - 3.5.0 - deprecated follow scope. now additionally accepts write

        - 4.0.0 - added languages


        [Follow account](https://docs.joinmastodon.org/methods/accounts/#follow)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Successfully followed, or account was already followed
        403:
          $ref: '#/components/responses/Error'
          description: Trying to follow someone that you block or that blocks you
        422:
          $ref: '#/components/responses/Error'
          description: Token does not have an authorized user
      security:
      - BearerAuth: []
  /api/v1/accounts/:id/lists:
    get:
      tags:
      - accounts
      summary: User lists that you have added this account to.
      description: 'User lists that you have added this account to.

        ## Version history


        - 2.1.0 - added


        [Get lists containing this account](https://docs.joinmastodon.org/methods/accounts/#lists)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: If the account is part of any lists, those entities will be
            returned. If the account is not part of any of your lists, then an empty
            array will be returned.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header, or instance is in
            whitelist mode and your token is not authorized with a user
        404:
          $ref: '#/components/responses/Error'
          description: Account does not exist
        410:
          $ref: '#/components/responses/Error'
          description: Account is suspended (since 2.4.0 and until 3.3.0)
        422:
          $ref: '#/components/responses/Error'
          description: Token does not have an authorized user
      security:
      - BearerAuth: []
  /api/v1/accounts/:id/featured_tags:
    get:
      tags:
      - accounts
      summary: Tags featured by this account.
      description: "Tags featured by this account.\n## Version history\n\n- 3.3.0\
        \ - added\n\n[Get account\u2019s featured tags](https://docs.joinmastodon.org/methods/accounts/#featured_tags)"
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: "Join Mastodon \xB7 Blog \xB7 "
      security:
      - BearerAuth: []
  /api/v1/accounts/:id/following:
    get:
      tags:
      - accounts
      summary: Accounts which the given account is following, if network is not hidden
        by the account owner.
      description: "Accounts which the given account is following, if network is not\
        \ hidden by the account owner.\n## Version history\n\n- 0.0.0 - added\n- 3.3.0\
        \ - both min_id and max_id can be used at the same time now\n- 4.0.0 - no\
        \ longer requires an app token + read:accounts\n\n[Get account\u2019s following](https://docs.joinmastodon.org/methods/accounts/#following)"
      parameters:
      - name: max_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: min_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 40
          accounts. Max 80 accounts.
        schema:
          type: string
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Sample output with limit=2.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header, or instance is in
            whitelist mode and your token is not authorized with a user
        404:
          $ref: '#/components/responses/Error'
          description: Account does not exist
        410:
          $ref: '#/components/responses/Error'
          description: Account is suspended (since 2.4.0 and until 3.3.0)
      security:
      - BearerAuth: []
  /api/v1/accounts/:id/followers:
    get:
      tags:
      - accounts
      summary: Accounts which follow the given account, if network is not hidden by
        the account owner.
      description: "Accounts which follow the given account, if network is not hidden\
        \ by the account owner.\n## Version history\n\n- 0.0.0 - added\n- 3.3.0 -\
        \ both min_id and max_id can be used at the same time now\n- 4.0.0 - no longer\
        \ requires an app token + read:accounts\n\n[Get account\u2019s followers](https://docs.joinmastodon.org/methods/accounts/#followers)"
      parameters:
      - name: max_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: min_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 40
          accounts. Max 80 accounts.
        schema:
          type: string
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Sample output with limit=2.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header, or instance is in
            whitelist mode and your token is not authorized with a user
        404:
          $ref: '#/components/responses/Error'
          description: Account does not exist
        410:
          $ref: '#/components/responses/Error'
          description: Account is suspended (since 2.4.0 and until 3.3.0)
      security:
      - BearerAuth: []
  /api/v1/accounts/:id/statuses:
    get:
      tags:
      - accounts
      summary: Statuses posted to the given account.
      description: "Statuses posted to the given account.\n## Version history\n\n\
        - 0.0.0 - added\n- 1.4.2 - add only_media and exclude_replies\n- 1.6.0 - add\
        \ pinned\n- 2.6.0 - add min_id\n- 2.7.0 - add exclude_reblogs and allow unauthed\
        \ use\n- 2.8.0 - add tagged parameter\n- 3.3.0 - both min_id and max_id can\
        \ be used at the same time now\n\n[Get account\u2019s statuses](https://docs.joinmastodon.org/methods/accounts/#statuses)"
      parameters:
      - name: max_id
        in: query
        description: String. All results returned will be lesser than this ID. In
          effect, sets an upper bound on results.
        schema:
          type: string
      - name: since_id
        in: query
        description: String. All results returned will be greater than this ID. In
          effect, sets a lower bound on results.
        schema:
          type: string
      - name: min_id
        in: query
        description: String. Returns results immediately newer than this ID. In effect,
          sets a cursor at this ID and paginates forward.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 20
          statuses. Max 40 statuses.
        schema:
          type: string
      - name: only_media
        in: query
        description: Boolean. Filter out statuses without attachments.
        schema:
          type: string
      - name: exclude_replies
        in: query
        description: Boolean. Filter out statuses in reply to a different account.
        schema:
          type: string
      - name: exclude_reblogs
        in: query
        description: Boolean. Filter out boosts from the response.
        schema:
          type: string
      - name: pinned
        in: query
        description: Boolean. Filter for pinned statuses only. Defaults to false,
          which includes all statuses. Pinned statuses do not receive special priority
          in the order of the returned results.
        schema:
          type: string
      - name: tagged
        in: query
        description: String. Filter for statuses using a specific hashtag.
        schema:
          type: string
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: If the instance is in whitelist mode and the Authorization
            header is missing or invalid
        401:
          $ref: '#/components/responses/Error'
          description: If the instance is in whitelist mode and the Authorization
            header is missing or invalid
        404:
          $ref: '#/components/responses/Error'
          description: Account does not exist
        410:
          $ref: '#/components/responses/Error'
          description: Account is suspended (since 2.4.0 and until 3.3.0)
      security:
      - BearerAuth: []
  /api/v1/accounts:
    post:
      tags:
      - accounts
      summary: Creates a user and account records. Returns an account access token
        for the app that initiated the request. The app should save this token for
        later, and should wait for the user to confirm their account by clicking a
        link in their email inbox.
      description: 'Creates a user and account records. Returns an account access
        token for the app that initiated the request. The app should save this token
        for later, and should wait for the user to confirm their account by clicking
        a link in their email inbox.

        A relationship between the OAuth Application and created user account is stored.

        ## Version history


        - 2.7.0 - added

        - 3.0.0 - added reason parameter

        - 3.4.0 - added details to failure response


        [Register an account](https://docs.joinmastodon.org/methods/accounts/#create)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The details parameter contains all detected errors. Its structure
            is a Hash with the key being the erroneous parameter, and its value being
            an array of all errors found.
        401:
          $ref: '#/components/responses/Error'
          description: The details parameter contains all detected errors. Its structure
            is a Hash with the key being the erroneous parameter, and its value being
            an array of all errors found.
        422:
          $ref: '#/components/responses/Error'
          description: The details parameter contains all detected errors. Its structure
            is a Hash with the key being the erroneous parameter, and its value being
            an array of all errors found.
        429:
          $ref: '#/components/responses/Error'
          description: "Join Mastodon \xB7 Blog \xB7 "
      security:
      - BearerAuth: []
  /api/v1/accounts/:id:
    get:
      tags:
      - accounts
      summary: View information about a profile.
      description: 'View information about a profile.

        ## Version history


        - 0.0.0 - added

        - 2.4.0 - returns 410 if account is suspended

        - 3.3.0 - returns an Account with suspended: true instead of 410


        [Get account](https://docs.joinmastodon.org/methods/accounts/#get)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The Account record will be returned. Note that acct of local
            users does not include the domain name.
        401:
          $ref: '#/components/responses/Error'
          description: If the instance is in whitelist mode and the Authorization
            header is missing or invalid
        404:
          $ref: '#/components/responses/Error'
          description: Account does not exist
        410:
          $ref: '#/components/responses/Error'
          description: Account is suspended (since 2.4.0 and until 3.3.0)
      security:
      - BearerAuth: []
  /api/v1/accounts/update_credentials:
    patch:
      tags:
      - accounts
      summary: "Update the user\u2019s display and preferences."
      description: "Update the user\u2019s display and preferences.\n## Version history\n\
        \n- 1.1.1 - added\n- 2.3.0 - added locked parameter\n- 2.4.0 - added source[privacy,sensitive]\
        \ parameters\n- 2.4.2 - added source[language] parameter\n- 2.7.0 - added\
        \ discoverable parameter\n- 4.1.0 - added hide_collections parameter\n- 4.2.0\
        \ - added indexable parameter\n\n[Update account credentials](https://docs.joinmastodon.org/methods/accounts/#update_credentials)"
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: 'To update account fields, you will need to construct your
            hash like so for example:'
        401:
          $ref: '#/components/responses/Error'
          description: Token does not have an authorized user
        422:
          $ref: '#/components/responses/Error'
          description: Token does not have an authorized user
      security:
      - BearerAuth: []
  /api/v1/accounts/verify_credentials:
    get:
      tags:
      - accounts
      summary: Test to make sure that the user token works.
      description: 'Test to make sure that the user token works.

        ## Version history


        - 0.0.0 - added

        - 4.3.0 - added profile scope


        [Verify account credentials](https://docs.joinmastodon.org/methods/accounts/#verify_credentials)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Note the extra source property, which is not visible on accounts
            other than your own. Also note that plain-text is used within source and
            HTML is used for their corresponding properties such as note and fields.
        401:
          $ref: '#/components/responses/Error'
          description: Your credential verification will fail if the token is invalid
            or incorrect.
        403:
          $ref: '#/components/responses/Error'
          description: Your user account is currently disabled, missing a confirmed
            email address, or pending approval.
        422:
          $ref: '#/components/responses/Error'
          description: Token does not have an authorized user
      security:
      - BearerAuth: []
  /api/v1/bookmarks:
    get:
      tags:
      - bookmarks
      summary: Statuses the user has bookmarked.
      description: 'Statuses the user has bookmarked.

        ## Version history


        - 3.1.0 - added

        - 3.3.0 - both min_id and max_id can be used at the same time now


        [View bookmarked statuses](https://docs.joinmastodon.org/methods/bookmarks/#get)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Because Bookmark IDs are generally not exposed via any API
            responses, you will have to parse the HTTP Link header to load older or
            newer results. See Paginating through API responses for more information.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
  /api/v1/favourites:
    get:
      tags:
      - favourites
      summary: Statuses the user has favourited.
      description: 'Statuses the user has favourited.

        ## Version history


        - 0.0.0 - added

        - 2.6.0 - min_id added

        - 3.3.0 - both min_id and max_id can be used at the same time now


        [View favourited statuses](https://docs.joinmastodon.org/methods/favourites/#get)'
      parameters:
      - name: max_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: min_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 20
          statuses. Max 40 statuses.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: An example call with limit=2.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/mutes:
    get:
      tags:
      - mutes
      summary: Accounts the user has muted.
      description: 'Accounts the user has muted.

        ## Version history


        - 0.0.0 - added

        - 3.3.0 - added mute_expires_at


        [View muted accounts](https://docs.joinmastodon.org/methods/mutes/#get)'
      parameters:
      - name: max_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 40
          accounts. Max 80 accounts.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Sample response with limit=2.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/blocks:
    get:
      tags:
      - blocks
      description: '

        ## Version history


        - 0.0.0 - added

        - 3.3.0 - both min_id and max_id can be used at the same time now


        [View blocked users](https://docs.joinmastodon.org/methods/blocks/#get)'
      parameters:
      - name: max_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: min_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 40
          accounts. Max 80 accounts.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Sample call with limit=2.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/domain_blocks:
    get:
      tags:
      - domain_blocks
      summary: View domains the user has blocked.
      description: 'View domains the user has blocked.

        ## Version history


        - 1.4.0 - added

        - 3.3.0 - both min_id and max_id can be used at the same time now


        [Get domain blocks](https://docs.joinmastodon.org/methods/domain_blocks/#get)'
      parameters:
      - name: max_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: min_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 100
          domain blocks. Max 200 domain blocks.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Sample call with limit=2.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/filters:
    get:
      tags:
      - filters
      description: '

        ## Version history


        - 2.4.3 - added

        - 4.0.0 - deprecated. For compatibility purposes, now returns a List of V1::Filter,
        with each V1::Filter representing one FilterKeyword (with the keyword being
        presented in the phrase attribute)


        [Client-side (v1) methods](https://docs.joinmastodon.org/methods/filters/#v1)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the FilterKeyword in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The filter has been deleted successfully, so an empty object
            will be returned.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: Filter does not exist or is not owned by you
        422:
          $ref: '#/components/responses/Error'
          description: 'If phrase is not provided properly:'
      security:
      - BearerAuth: []
  /api/v2/filters:
    get:
      tags:
      - filters
      summary: Obtain a list of all filter groups for the current user.
      description: 'Obtain a list of all filter groups for the current user.

        ## Version history


        - 4.0.0 - added


        [Server-side (v2) methods](https://docs.joinmastodon.org/methods/filters/#v2)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Filter in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: FilterStatus deleted successfully
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: FilterStatus is not owned by you or does not exist
        422:
          $ref: '#/components/responses/Error'
          description: No keyword was provided
      security:
      - BearerAuth: []
  /api/v1/reports:
    post:
      tags:
      - reports
      description: '

        ## Version history


        - 2.3.0 - add forward parameter

        - 3.5.0 - add category and rule_ids parameters

        - 4.0.0 - category is now optional if rule_ids is provided

        - 4.2.0 - add legal category


        [File a report](https://docs.joinmastodon.org/methods/reports/#post)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Sample call with one status ID provided and a category of spam
            with a comment
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header
        404:
          $ref: '#/components/responses/Error'
          description: Report not filed.
        422:
          $ref: '#/components/responses/Error'
          description: Token does not have an authorized user
      security:
      - BearerAuth: []
  /api/v1/follow_requests/:account_id/reject:
    post:
      tags:
      - follow_requests
      description: '

        ## Version history


        - 0.0.0 - added

        - 3.0.0 - now returns Relationship instead of nothing


        [Reject follow request](https://docs.joinmastodon.org/methods/follow_requests/#reject)'
      parameters:
      - name: :account_id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Your Relationship with this account should be unchanged.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: No pending follow request from that account ID
      security:
      - BearerAuth: []
  /api/v1/follow_requests/:account_id/authorize:
    post:
      tags:
      - follow_requests
      description: '

        ## Version history


        - 0.0.0 - added

        - 3.0.0 - now returns Relationship instead of nothing


        [Accept follow request](https://docs.joinmastodon.org/methods/follow_requests/#accept)'
      parameters:
      - name: :account_id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Your Relationship with this account should be updated so that
            you are followed_by this account.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: No pending follow request from that account ID
      security:
      - BearerAuth: []
  /api/v1/follow_requests:
    get:
      tags:
      - follow_requests
      description: '

        ## Version history


        - 0.0.0 - added


        [View pending follow requests](https://docs.joinmastodon.org/methods/follow_requests/#get)'
      parameters:
      - name: max_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 40
          accounts. Max 80 accounts.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Sample call for Accounts that are requesting a follow, with
            limit=2
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/endorsements:
    get:
      tags:
      - endorsements
      summary: Accounts that the user is currently featuring on their profile.
      description: 'Accounts that the user is currently featuring on their profile.

        ## Version history


        - 2.5.0 - added


        [View currently featured profiles](https://docs.joinmastodon.org/methods/endorsements/#get)'
      parameters:
      - name: max_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 40
          accounts. Max 80 accounts.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Sample call with limit=2.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/featured_tags/suggestions:
    get:
      tags:
      - featured_tags
      summary: Shows up to 10 recently-used tags.
      description: 'Shows up to 10 recently-used tags.

        ## Version history


        - 3.0.0 - added


        [View suggested tags to feature](https://docs.joinmastodon.org/methods/featured_tags/#suggestions)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Truncated results to first and last tag.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/featured_tags/:id:
    delete:
      tags:
      - featured_tags
      summary: Stop promoting a hashtag on your profile.
      description: 'Stop promoting a hashtag on your profile.

        ## Version history


        - 3.0.0 - added


        [Unfeature a tag](https://docs.joinmastodon.org/methods/featured_tags/#unfeature)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the FeaturedTag in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The tag was unfeatured.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: FeaturedTag is not owned by you or does not exist
      security:
      - BearerAuth: []
  /api/v1/featured_tags:
    get:
      tags:
      - featured_tags
      summary: List all hashtags featured on your profile.
      description: 'List all hashtags featured on your profile.

        ## Version history


        - 3.0.0 - added


        [View your featured tags](https://docs.joinmastodon.org/methods/featured_tags/#get)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/preferences:
    get:
      tags:
      - preferences
      summary: Preferences defined by the user in their account settings.
      description: 'Preferences defined by the user in their account settings.

        ## Version history


        - 2.8.0 - added


        [View user preferences](https://docs.joinmastodon.org/methods/preferences/#get)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/followed_tags:
    get:
      tags:
      - followed_tags
      summary: List your followed hashtags.
      description: 'List your followed hashtags.

        ## Version history


        - 4.0.0 - added

        - 4.1.0 - add pagination headers


        [View all followed tags](https://docs.joinmastodon.org/methods/followed_tags/#get)'
      parameters:
      - name: max_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: min_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 100
          tags. Max 200 tags.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: List of followed hashtags
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/suggestions:
    get:
      tags:
      - suggestions
      summary: Accounts the user has had past positive interactions with, but is not
        yet following.
      description: 'Accounts the user has had past positive interactions with, but
        is not yet following.

        ## Version history


        - 2.4.3 - added

        - 3.4.0 - deprecated


        [View follow suggestions (v1) deprecated](https://docs.joinmastodon.org/methods/suggestions/#v1)'
      deprecated: true
      parameters:
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 40
          accounts. Max 80 accounts.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/suggestions/:account_id:
    delete:
      tags:
      - suggestions
      summary: Remove an account from follow suggestions.
      description: 'Remove an account from follow suggestions.

        ## Version history


        - 2.4.3 - added


        [Remove a suggestion](https://docs.joinmastodon.org/methods/suggestions/#remove)'
      parameters:
      - name: :account_id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: A successful call will return an empty object. Note the call
            will be successful even if the account id provided is invalid or is not
            a suggested account.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v2/suggestions:
    get:
      tags:
      - suggestions
      summary: Accounts that are promoted by staff, or that the user has had past
        positive interactions with, but is not yet following.
      description: 'Accounts that are promoted by staff, or that the user has had
        past positive interactions with, but is not yet following.

        ## Version history


        - 3.4.0 - added


        [View follow suggestions (v2)](https://docs.joinmastodon.org/methods/suggestions/#v2)'
      parameters:
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 40
          accounts. Max 80 accounts.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/tags/:id/unfollow:
    post:
      tags:
      - tags
      summary: Unfollow a hashtag. Posts containing this hashtag will no longer be
        inserted into your home timeline.
      description: 'Unfollow a hashtag. Posts containing this hashtag will no longer
        be inserted into your home timeline.

        ## Version history


        - 4.0.0 - added


        [Unfollow a hashtag](https://docs.joinmastodon.org/methods/tags/#unfollow)'
      parameters:
      - name: :id
        in: path
        description: required String. The name of the hashtag.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Tag has been successfully unfollowed, or was already unfollowed
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/tags/:id/follow:
    post:
      tags:
      - tags
      summary: Follow a hashtag. Posts containing a followed hashtag will be inserted
        into your home timeline.
      description: 'Follow a hashtag. Posts containing a followed hashtag will be
        inserted into your home timeline.

        ## Version history


        - 4.0.0 - added

        - 4.1.0 - this action is now idempotent


        [Follow a hashtag](https://docs.joinmastodon.org/methods/tags/#follow)'
      parameters:
      - name: :id
        in: path
        description: required String. The name of the hashtag.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Tag has been successfully followed
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        422:
          $ref: '#/components/responses/Error'
          description: 'Prior to 4.1.0: Tag was already followed'
      security:
      - BearerAuth: []
  /api/v1/tags/:id:
    get:
      tags:
      - tags
      summary: Show a hashtag and its associated information
      description: 'Show a hashtag and its associated information

        ## Version history


        - 4.0.0 - added


        [View information about a single tag](https://docs.joinmastodon.org/methods/tags/#get)'
      parameters:
      - name: :id
        in: path
        description: required String. The name of the hashtag.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: "Join Mastodon \xB7 Blog \xB7 "
      security:
      - BearerAuth: []
  /api/v1/profile/header:
    delete:
      tags:
      - profile
      description: '

        ## Version history


        - 4.2.0 - added


        [Delete profile header](https://docs.joinmastodon.org/methods/profile/#delete-profile-header)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: "The header was successfully deleted from the user\u2019s profile.\
            \ If there were no header associated with the profile, the response will\
            \ still indicate a successful deletion."
      security:
      - BearerAuth: []
  /api/v1/profile/avatar:
    delete:
      tags:
      - profile
      description: '

        ## Version history


        - 4.2.0 - added


        [Delete profile avatar](https://docs.joinmastodon.org/methods/profile/#delete-profile-avatar)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: "The avatar was successfully deleted from the user\u2019s profile.\
            \ If there were no avatar associated with the profile, the response will\
            \ still indicate a successful deletion."
      security:
      - BearerAuth: []
  /api/v1/statuses/:id/card:
    get:
      tags:
      - statuses
      description: '

        ## Version history


        - 0.0.0 - added

        - 2.6.0 - deprecated in favor of card property inlined on Status entity

        - 3.0.0 - removed


        [Fetch preview card deprecated](https://docs.joinmastodon.org/methods/statuses/#card)'
      deprecated: true
      parameters:
      - name: :id
        in: path
        description: required String. The local ID of the Status in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Status does not exist or is private.
        404:
          $ref: '#/components/responses/Error'
          description: Status does not exist or is private.
      security:
      - BearerAuth: []
  /api/v1/statuses/:id/source:
    get:
      tags:
      - statuses
      summary: Obtain the source properties for a status so that it can be edited.
      description: 'Obtain the source properties for a status so that it can be edited.

        ## Version history


        - 3.5.0 - added


        [View status source](https://docs.joinmastodon.org/methods/statuses/#source)'
      parameters:
      - name: :id
        in: path
        description: required String. The local ID of the Status in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: Status does not exist or is private.
      security:
      - BearerAuth: []
  /api/v1/statuses/:id/history:
    get:
      tags:
      - statuses
      summary: Get all known versions of a status, including the initial and current
        states.
      description: 'Get all known versions of a status, including the initial and
        current states.

        ## Version history


        - 3.5.0 - added


        [View edit history of a status](https://docs.joinmastodon.org/methods/statuses/#history)'
      parameters:
      - name: :id
        in: path
        description: required String. The local ID of the Status in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Status does not exist or is private.
        404:
          $ref: '#/components/responses/Error'
          description: Status does not exist or is private.
      security:
      - BearerAuth: []
  /api/v1/statuses/:id:
    get:
      tags:
      - statuses
      summary: Obtain information about a status.
      description: 'Obtain information about a status.

        ## Version history


        - 0.0.0 - added

        - 2.7.0 - public statuses no longer require token


        [View a single status](https://docs.joinmastodon.org/methods/statuses/#get)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Status in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Instance is in authorized-fetch mode.
        401:
          $ref: '#/components/responses/Error'
          description: Instance is in authorized-fetch mode.
        404:
          $ref: '#/components/responses/Error'
          description: Status does not exist or is private.
      security:
      - BearerAuth: []
  /api/v1/statuses/:id/unpin:
    post:
      tags:
      - statuses
      summary: Unfeature a status from the top of your profile.
      description: 'Unfeature a status from the top of your profile.

        ## Version history


        - 1.6.0 - added


        [Unpin status from profile](https://docs.joinmastodon.org/methods/statuses/#unpin)'
      parameters:
      - name: :id
        in: path
        description: required String. The local ID of the Status in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Status unpinned, or was already not pinned
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: Status does not exist or is private.
      security:
      - BearerAuth: []
  /api/v1/statuses/:id/pin:
    post:
      tags:
      - statuses
      summary: Feature one of your own public statuses at the top of your profile.
      description: 'Feature one of your own public statuses at the top of your profile.

        ## Version history


        - 1.6.0 - added

        - 3.5.0 - you can now pin private posts


        [Pin status to profile](https://docs.joinmastodon.org/methods/statuses/#pin)'
      parameters:
      - name: :id
        in: path
        description: required String. The local ID of the Status in the database.
          The status should be authored by the authorized account.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Status pinned. Note the status is not a reblog and its authoring
            account is your own.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: Status does not exist or is private.
        422:
          $ref: '#/components/responses/Error'
          description: 'Status is not owned by you:'
      security:
      - BearerAuth: []
  /api/v1/statuses/:id/unmute:
    post:
      tags:
      - statuses
      summary: Start receiving notifications again for the thread that this status
        is part of.
      description: 'Start receiving notifications again for the thread that this status
        is part of.

        ## Version history


        - 1.4.2 - added


        [Unmute a conversation](https://docs.joinmastodon.org/methods/statuses/#unmute)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Status in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: "Status\u2019s conversation unmuted, or was already unmuted"
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: Status does not exist or is private.
      security:
      - BearerAuth: []
  /api/v1/statuses/:id/mute:
    post:
      tags:
      - statuses
      summary: Do not receive notifications for the thread that this status is part
        of. Must be a thread in which you are a participant.
      description: 'Do not receive notifications for the thread that this status is
        part of. Must be a thread in which you are a participant.

        ## Version history


        - 1.4.2 - added


        [Mute a conversation](https://docs.joinmastodon.org/methods/statuses/#mute)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Status in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: "Status\u2019s conversation muted, or was already muted"
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: Status does not exist or is private.
      security:
      - BearerAuth: []
  /api/v1/statuses/:id/unbookmark:
    post:
      tags:
      - statuses
      summary: Remove a status from your private bookmarks.
      description: 'Remove a status from your private bookmarks.

        ## Version history


        - 3.1.0 - added


        [Undo bookmark of a status](https://docs.joinmastodon.org/methods/statuses/#unbookmark)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Status in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Status was unbookmarked or was already not bookmarked
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: Status does not exist or is private.
      security:
      - BearerAuth: []
  /api/v1/statuses/:id/bookmark:
    post:
      tags:
      - statuses
      summary: Privately bookmark a status.
      description: 'Privately bookmark a status.

        ## Version history


        - 3.1.0 - added


        [Bookmark a status](https://docs.joinmastodon.org/methods/statuses/#bookmark)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Status in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Status bookmarked or was already bookmarked
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/statuses/:id/unreblog:
    post:
      tags:
      - statuses
      summary: Undo a reshare of a status.
      description: 'Undo a reshare of a status.

        ## Version history


        - 0.0.0 - added


        [Undo boost of a status](https://docs.joinmastodon.org/methods/statuses/#unreblog)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Status in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Status unboosted or was already not boosted
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: Status does not exist or is private
      security:
      - BearerAuth: []
  /api/v1/statuses/:id/reblog:
    post:
      tags:
      - statuses
      summary: Reshare a status on your own profile.
      description: 'Reshare a status on your own profile.

        ## Version history


        - 0.0.0 - added

        - 2.8.0 - add visibility parameter


        [Boost a status](https://docs.joinmastodon.org/methods/statuses/#boost)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Status in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Status has been reblogged. Note that the top-level id has changed.
            The id of the boosted status is now inside the reblog property. The top-level
            id is the id of the reblog itself. Also note that reblogs cannot be pinned.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: Status does not exist or is private
      security:
      - BearerAuth: []
  /api/v1/statuses/:id/unfavourite:
    post:
      tags:
      - statuses
      summary: Remove a status from your favourites list.
      description: 'Remove a status from your favourites list.

        ## Version history


        - 0.0.0 - added


        [Undo favourite of a status](https://docs.joinmastodon.org/methods/statuses/#unfavourite)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Status in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Status unfavourited or was already not favourited
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: Status does not exist or is private
      security:
      - BearerAuth: []
  /api/v1/statuses/:id/favourite:
    post:
      tags:
      - statuses
      summary: Add a status to your favourites list.
      description: 'Add a status to your favourites list.

        ## Version history


        - 0.0.0 - added


        [Favourite a status](https://docs.joinmastodon.org/methods/statuses/#favourite)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Status in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Status favourited or was already favourited
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: Status does not exist or is private
      security:
      - BearerAuth: []
  /api/v1/statuses/:id/favourited_by:
    get:
      tags:
      - statuses
      summary: View who favourited a given status.
      description: 'View who favourited a given status.

        ## Version history


        - 0.0.0 - added


        [See who favourited a status](https://docs.joinmastodon.org/methods/statuses/#favourited_by)'
      parameters:
      - name: max_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 40
          accounts. Max 80 accounts.
        schema:
          type: string
      - name: :id
        in: path
        description: required String. The ID of the Status in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: A list of accounts who favourited the status
        404:
          $ref: '#/components/responses/Error'
          description: Status does not exist or is private
      security:
      - BearerAuth: []
  /api/v1/statuses/:id/reblogged_by:
    get:
      tags:
      - statuses
      summary: View who boosted a given status.
      description: 'View who boosted a given status.

        ## Version history


        - 0.0.0 - added


        [See who boosted a status](https://docs.joinmastodon.org/methods/statuses/#reblogged_by)'
      parameters:
      - name: max_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 40
          accounts. Max 80 accounts.
        schema:
          type: string
      - name: :id
        in: path
        description: required String. The ID of the Status in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: A list of accounts that boosted the status
        404:
          $ref: '#/components/responses/Error'
          description: Status does not exist or is private
      security:
      - BearerAuth: []
  /api/v1/statuses/:id/translate:
    post:
      tags:
      - statuses
      summary: Translate the status content into some language.
      description: 'Translate the status content into some language.

        ## Version history


        - 4.0.0 - added


        [Translate a status](https://docs.joinmastodon.org/methods/statuses/#translate)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Status in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Translating a status in Spanish with content warning and media
            into English
        404:
          $ref: '#/components/responses/Error'
          description: Status is private or does not exist
        503:
          $ref: '#/components/responses/Error'
          description: The translation request failed
      security:
      - BearerAuth: []
  /api/v1/statuses/:id/context:
    get:
      tags:
      - statuses
      summary: View statuses above and below this status in the thread.
      description: 'View statuses above and below this status in the thread.

        ## Version history


        - 0.0.0 - added

        - 4.0.0 - limit unauthenticated requests


        [Get parent and child statuses in context](https://docs.joinmastodon.org/methods/statuses/#context)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Status in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Status is private or does not exist
        404:
          $ref: '#/components/responses/Error'
          description: Status is private or does not exist
      security:
      - BearerAuth: []
  /api/v1/statuses:
    post:
      tags:
      - statuses
      summary: Publish a status with the given parameters.
      description: 'Publish a status with the given parameters.

        ## Version history


        - 0.0.0 - added

        - 2.7.0 - scheduled_at added

        - 2.8.0 - poll added


        [Post a new status](https://docs.joinmastodon.org/methods/statuses/#create)'
      parameters:
      - name: Idempotency-Key
        in: header
        description: Provide this header with any arbitrary string to prevent duplicate
          submissions of the same status. Consider using a hash or UUID generated
          client-side. Idempotency keys are stored for up to 1 hour.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: 'Status will be posted with chosen parameters:'
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        422:
          $ref: '#/components/responses/Error'
          description: "Join Mastodon \xB7 Blog \xB7 "
      security:
      - BearerAuth: []
  /api/v1/media:
    post:
      tags:
      - media
      summary: Creates an attachment to be used with a new status. This method will
        return after the full sized media is done processing.
      description: 'Creates an attachment to be used with a new status. This method
        will return after the full sized media is done processing.

        ## Version history


        - 0.0.0 - added

        - 2.3.0 - add focus parameter

        - 3.1.3 - deprecated in favor of POST /api/v2/media, which is equal to v1
        in all aspects, except it returns HTTP 202, and the returned JSON object has
        a url of null. This is because while the thumbnail is prepared synchronously,
        the full version of the media attachment will be processed in the background.

        - 3.2.0 - add thumbnail parameter


        [Upload media as an attachment (v1) deprecated](https://docs.joinmastodon.org/methods/media/#v1)'
      deprecated: true
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Attachment created successfully. Note that the MediaAttachment
            will be created even if the file is not understood correctly due to failed
            processing.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        422:
          $ref: '#/components/responses/Error'
          description: File or file type is unsupported or invalid
      security:
      - BearerAuth: []
  /api/v1/media/:id:
    get:
      tags:
      - media
      summary: Get a media attachment, before it is attached to a status and posted,
        but after it is accepted for processing. Use this method to check that the
        full-sized media has finished processing.
      description: 'Get a media attachment, before it is attached to a status and
        posted, but after it is accepted for processing. Use this method to check
        that the full-sized media has finished processing.

        ## Version history


        - 3.1.3 - added


        [Get media attachment](https://docs.joinmastodon.org/methods/media/#get)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the MediaAttachment in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The media file was processed, and a url to the processed media
            is available.
        206:
          $ref: '#/components/responses/Error'
          description: The media attachment is still being processed
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: MediaAttachment is not owned by you or does not exist
        422:
          $ref: '#/components/responses/Error'
          description: There was an error processing the media attachment
      security:
      - BearerAuth: []
  /api/v2/media:
    post:
      tags:
      - media
      summary: Creates a media attachment to be used with a new status. The full sized
        media will be processed asynchronously in the background for large uploads.
      description: 'Creates a media attachment to be used with a new status. The full
        sized media will be processed asynchronously in the background for large uploads.

        ## Version history


        - 3.1.3 - added

        - 3.2.0 - add thumbnail parameter

        - 4.0.0 - Smaller media formats (image) will be processed synchronously and
        return 200 instead of 202. Larger media formats (video, gifv, audio) will
        continue to be processed asynchronously and return 202.


        [Upload media as an attachment (async)](https://docs.joinmastodon.org/methods/media/#v2)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: MediaAttachment was created successfully, and the full-size
            file was processed synchronously.
        202:
          $ref: '#/components/responses/Error'
          description: "MediaAttachment was created successfully, but the full-size\
            \ file is still processing. Note that the MediaAttachment\u2019s url will\
            \ still be null, as the media is still being processed in the background.\
            \ However, the preview_url should be available. Use GET /api/v1/media/:id\
            \ to check the status of the media attachment."
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        422:
          $ref: '#/components/responses/Error'
          description: File or file type is unsupported or invalid
        500:
          $ref: '#/components/responses/Error'
          description: Could not generate a thumbnail for the attachment
      security:
      - BearerAuth: []
  /api/v1/polls/:id/votes:
    post:
      tags:
      - polls
      summary: Vote on a poll attached to a status.
      description: 'Vote on a poll attached to a status.

        ## Version history


        - 2.8.0 - added


        [Vote on a poll](https://docs.joinmastodon.org/methods/polls/#vote)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Poll in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Poll was voted on
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: "Poll does not exist, or poll\u2019s parent status is private"
        422:
          $ref: '#/components/responses/Error'
          description: The poll has expired
      security:
      - BearerAuth: []
  /api/v1/polls/:id:
    get:
      tags:
      - polls
      summary: View a poll attached to a status.
      description: 'View a poll attached to a status.

        ## Version history


        - 2.8.0 - added


        [View a poll](https://docs.joinmastodon.org/methods/polls/#get)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Poll in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: "Poll does not exist, or poll\u2019s parent status is private"
        404:
          $ref: '#/components/responses/Error'
          description: "Poll does not exist, or poll\u2019s parent status is private"
      security:
      - BearerAuth: []
  /api/v1/scheduled_statuses/:id:
    get:
      tags:
      - scheduled_statuses
      description: '

        ## Version history


        - 2.7.0 - added


        [View a single scheduled status](https://docs.joinmastodon.org/methods/scheduled_statuses/#get-one)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the ScheduledStatus in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: ScheduledStatus is not owned by you or does not exist
      security:
      - BearerAuth: []
  /api/v1/scheduled_statuses:
    get:
      tags:
      - scheduled_statuses
      description: '

        ## Version history


        - 2.7.0 - added

        - 3.3.0 - both min_id and max_id can be used at the same time now


        [View scheduled statuses](https://docs.joinmastodon.org/methods/scheduled_statuses/#get)'
      parameters:
      - name: max_id
        in: query
        description: String. All results returned will be lesser than this ID. In
          effect, sets an upper bound on results.
        schema:
          type: string
      - name: since_id
        in: query
        description: String. All results returned will be greater than this ID. In
          effect, sets a lower bound on results.
        schema:
          type: string
      - name: min_id
        in: query
        description: String. Returns results immediately newer than this ID. In effect,
          sets a cursor at this ID and paginates forward.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 20
          statuses. Max 40 statuses.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/timelines/direct:
    get:
      tags:
      - timelines
      summary: "View statuses with a \u201Cdirect\u201D privacy, from your account\
        \ or in your notifications."
      description: "View statuses with a \u201Cdirect\u201D privacy, from your account\
        \ or in your notifications.\n## Version history\n\n- 2.6.0 - add min_id. deprecated\
        \ in favor of Conversations API\n- 3.0.0 - removed\n\n[View direct timeline\
        \ deprecated](https://docs.joinmastodon.org/methods/timelines/#direct)"
      deprecated: true
      parameters:
      - name: max_id
        in: query
        description: String. All results returned will be lesser than this ID. In
          effect, sets an upper bound on results.
        schema:
          type: string
      - name: since_id
        in: query
        description: String. All results returned will be greater than this ID. In
          effect, sets a lower bound on results.
        schema:
          type: string
      - name: min_id
        in: query
        description: String. Returns results immediately newer than this ID. In effect,
          sets a cursor at this ID and paginates forward.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 20
          statuses. Max 40 statuses.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Statuses with direct visibility, authored by you or mentioning
            you. Statuses are not grouped by conversation, but are returned in chronological
            order.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/timelines/list/:list_id:
    get:
      tags:
      - timelines
      summary: View statuses in the given list timeline.
      description: 'View statuses in the given list timeline.

        ## Version history


        - 2.1.0 - added

        - 2.6.0 - add min_id

        - 3.3.0 - both min_id and max_id can be used at the same time now


        [View list timeline](https://docs.joinmastodon.org/methods/timelines/#list)'
      parameters:
      - name: max_id
        in: query
        description: String. All results returned will be lesser than this ID. In
          effect, sets an upper bound on results.
        schema:
          type: string
      - name: since_id
        in: query
        description: String. All results returned will be greater than this ID. In
          effect, sets a lower bound on results.
        schema:
          type: string
      - name: min_id
        in: query
        description: String. Returns results immediately newer than this ID. In effect,
          sets a cursor at this ID and paginates forward.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 20
          statuses. Max 40 statuses.
        schema:
          type: string
      - name: :list_id
        in: path
        description: required String. Local ID of the List in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Statuses in this list will be returned.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: List is not owned by you or does not exist
      security:
      - BearerAuth: []
  /api/v1/timelines/link?url=:url:
    get:
      tags:
      - timelines
      summary: View public statuses containing a link to the specified currently-trending
        article. This only lists statuses from people who have opted in to discoverability
        features.
      description: 'View public statuses containing a link to the specified currently-trending
        article. This only lists statuses from people who have opted in to discoverability
        features.

        ## Version history


        - 4.3.0 - added


        [View link timeline](https://docs.joinmastodon.org/methods/timelines/#link)'
      parameters:
      - name: url
        in: query
        description: required String. The URL of the trending article.
        required: true
        schema:
          type: string
      - name: max_id
        in: query
        description: String. All results returned will be lesser than this ID. In
          effect, sets an upper bound on results.
        schema:
          type: string
      - name: since_id
        in: query
        description: String. All results returned will be greater than this ID. In
          effect, sets a lower bound on results.
        schema:
          type: string
      - name: min_id
        in: query
        description: String. Returns results immediately newer than this ID. In effect,
          sets a cursor at this ID and paginates forward.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 20
          statuses. Max 40 statuses.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The provided URL is not currently trending.
        404:
          $ref: '#/components/responses/Error'
          description: The provided URL is not currently trending.
      security:
      - BearerAuth: []
  /api/v1/timelines/home:
    get:
      tags:
      - timelines
      summary: View statuses from followed users and hashtags.
      description: 'View statuses from followed users and hashtags.

        ## Version history


        - 0.0.0 - added

        - 2.6.0 - add min_id

        - 3.3.0 - both min_id and max_id can be used at the same time now

        - 4.0.0 - as users can now follow hashtags, statuses from non-followed users
        may appear in the timeline


        [View home timeline](https://docs.joinmastodon.org/methods/timelines/#home)'
      parameters:
      - name: max_id
        in: query
        description: String. All results returned will be lesser than this ID. In
          effect, sets an upper bound on results.
        schema:
          type: string
      - name: since_id
        in: query
        description: String. All results returned will be greater than this ID. In
          effect, sets a lower bound on results.
        schema:
          type: string
      - name: min_id
        in: query
        description: String. Returns results immediately newer than this ID. In effect,
          sets a cursor at this ID and paginates forward.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 20
          statuses. Max 40 statuses.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Statuses in your home timeline will be returned
        206:
          $ref: '#/components/responses/Error'
          description: Home feed is regenerating
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/timelines/tag/:hashtag:
    get:
      tags:
      - timelines
      summary: View public statuses containing the given hashtag.
      description: 'View public statuses containing the given hashtag.

        ## Version history


        - 0.0.0 - added

        - 2.3.0 - added only_media

        - 2.6.0 - add min_id

        - 2.7.0 - add any[], all[], none[] for additional tags

        - 3.0.0 - auth is required if public preview is disabled

        - 3.3.0 - both min_id and max_id can be used at the same time now. add remote


        [View hashtag timeline](https://docs.joinmastodon.org/methods/timelines/#tag)'
      parameters:
      - name: any[]
        in: query
        description: Array of String. Return statuses that contain any of these additional
          tags.
        schema:
          type: string
      - name: all[]
        in: query
        description: Array of String. Return statuses that contain all of these additional
          tags.
        schema:
          type: string
      - name: none[]
        in: query
        description: Array of String. Return statuses that contain none of these additional
          tags.
        schema:
          type: string
      - name: local
        in: query
        description: Boolean. Return only local statuses? Defaults to false.
        schema:
          type: string
      - name: remote
        in: query
        description: Boolean. Return only remote statuses? Defaults to false.
        schema:
          type: string
      - name: only_media
        in: query
        description: Boolean. Return only statuses with media attachments? Defaults
          to false.
        schema:
          type: string
      - name: max_id
        in: query
        description: String. All results returned will be lesser than this ID. In
          effect, sets an upper bound on results.
        schema:
          type: string
      - name: since_id
        in: query
        description: String. All results returned will be greater than this ID. In
          effect, sets a lower bound on results.
        schema:
          type: string
      - name: min_id
        in: query
        description: String. Returns results immediately newer than this ID. In effect,
          sets a cursor at this ID and paginates forward.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 20
          statuses. Max 40 statuses.
        schema:
          type: string
      - name: :hashtag
        in: path
        description: 'required String. The name of the hashtag (not including the
          # symbol).'
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: 'Sample timeline for the hashtag #cats and limit=2'
        404:
          $ref: '#/components/responses/Error'
          description: Hashtag does not exist
      security:
      - BearerAuth: []
  /api/v1/timelines/public:
    get:
      tags:
      - timelines
      summary: View public statuses.
      description: 'View public statuses.

        ## Version history


        - 0.0.0 - added

        - 2.3.0 - added only_media

        - 2.6.0 - add min_id

        - 3.0.0 - auth is required if public preview is disabled

        - 3.1.4 - added remote

        - 3.3.0 - both min_id and max_id can be used at the same time now


        [View public timeline](https://docs.joinmastodon.org/methods/timelines/#public)'
      parameters:
      - name: local
        in: query
        description: Boolean. Show only local statuses? Defaults to false.
        schema:
          type: string
      - name: remote
        in: query
        description: Boolean. Show only remote statuses? Defaults to false.
        schema:
          type: string
      - name: only_media
        in: query
        description: Boolean. Show only statuses with media attached? Defaults to
          false.
        schema:
          type: string
      - name: max_id
        in: query
        description: String. All results returned will be lesser than this ID. In
          effect, sets an upper bound on results.
        schema:
          type: string
      - name: since_id
        in: query
        description: String. All results returned will be greater than this ID. In
          effect, sets a lower bound on results.
        schema:
          type: string
      - name: min_id
        in: query
        description: String. Returns results immediately newer than this ID. In effect,
          sets a cursor at this ID and paginates forward.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 20
          statuses. Max 40 statuses.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Sample API call with limit=2
      security:
      - BearerAuth: []
  /api/v1/conversations/:id/read:
    post:
      tags:
      - conversations
      description: '

        ## Version history


        - 2.6.0 - added


        [Mark a conversation as read](https://docs.joinmastodon.org/methods/conversations/#read)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Conversation in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The value of unread has been changed to false.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: The conversation does not exist, or is not owned by you.
      security:
      - BearerAuth: []
  /api/v1/conversations/:id:
    delete:
      tags:
      - conversations
      summary: Removes a conversation from your list of conversations.
      description: 'Removes a conversation from your list of conversations.

        ## Version history


        - 2.6.0 - added


        [Remove a conversation](https://docs.joinmastodon.org/methods/conversations/#delete)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Conversation in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: The conversation does not exist, or is not owned by you.
      security:
      - BearerAuth: []
  /api/v1/conversations:
    get:
      tags:
      - conversations
      description: '

        ## Version history


        - 2.6.0 - added

        - 3.3.0 - both min_id and max_id can be used at the same time now


        [View all conversations](https://docs.joinmastodon.org/methods/conversations/#get)'
      parameters:
      - name: max_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: min_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 20
          conversations. Max 40 conversations.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Truncated sample results of an API call with limit=2
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/lists/:id/accounts:
    get:
      tags:
      - lists
      description: '

        ## Version history


        - 2.1.0 - added

        - 3.3.0 - both min_id and max_id can be used at the same time now


        [View accounts in a list](https://docs.joinmastodon.org/methods/lists/#accounts)'
      parameters:
      - name: max_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: min_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results. Defaults to 40 accounts.
          Max 80 accounts. Set to 0 in order to get all accounts without pagination.
        schema:
          type: string
      - name: :id
        in: path
        description: required String. The ID of the List in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Because you do not know beforehand which Accounts are included
            in a List, you will have to parse the HTTP Link header to load older or
            newer results. See Paginating through API responses for more information.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: List does not exist or is not owned by you.
      security:
      - BearerAuth: []
  /api/v1/lists/:id:
    get:
      tags:
      - lists
      summary: Fetch the list with the given ID. Used for verifying the title of a
        list, and which replies to show within that list.
      description: 'Fetch the list with the given ID. Used for verifying the title
        of a list, and which replies to show within that list.

        ## Version history


        - 2.1.0 - added


        [Show a single list](https://docs.joinmastodon.org/methods/lists/#get-one)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the List in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The list 12249 exists and is owned by you
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: List does not exist or is not owned by you
      security:
      - BearerAuth: []
  /api/v1/lists:
    get:
      tags:
      - lists
      summary: Fetch all lists that the user owns.
      description: 'Fetch all lists that the user owns.

        ## Version history


        - 2.1.0 - added


        [View your lists](https://docs.joinmastodon.org/methods/lists/#get)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Use id as a parameter for related API calls.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/markers:
    get:
      tags:
      - markers
      summary: Get current positions in timelines.
      description: 'Get current positions in timelines.

        ## Version history


        - 3.0.0 - added


        [Get saved timeline positions](https://docs.joinmastodon.org/methods/markers/#get)'
      parameters:
      - name: timeline[]
        in: query
        description: 'Array of String. Specify the timeline(s) for which markers should
          be fetched. Possible values: home, notifications. If not provided, an empty
          object will be returned.'
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: A request with ?timeline[]=home&timeline[]=notifications
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/streaming/direct:
    get:
      tags:
      - streaming
      summary: Returns events for received direct messages.
      description: 'Returns events for received direct messages.

        ## Version history


        - 2.4.0 - added

        - 2.6.0 - now returns conversation instead of update


        [Watch for direct messages](https://docs.joinmastodon.org/methods/streaming/#direct)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Streaming'
          description: The streaming response.
      security:
      - BearerAuth: []
  /api/v1/streaming/list:
    get:
      tags:
      - streaming
      summary: Returns statuses for a list
      description: 'Returns statuses for a list

        ## Version history


        - 2.1.0 - added

        - 3.5.0 - now returns status.update

        - 4.2.0 - changed to require a User token, removing Public and App token access
        #23989


        [Watch for list updates](https://docs.joinmastodon.org/methods/streaming/#list)'
      parameters:
      - name: list
        in: query
        description: required String. The ID of the list to watch.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Streaming'
          description: The streaming response.
      security:
      - BearerAuth: []
  /api/v1/streaming/hashtag/local:
    get:
      tags:
      - streaming
      summary: Returns all local public statuses for a particular hashtag
      description: 'Returns all local public statuses for a particular hashtag

        ## Version history


        - 1.1.0 - added

        - 3.5.0 - now returns status.update

        - 4.2.0 - changed to require a User token, removing Public and App token access
        #23989


        [Watch the local timeline for a hashtag](https://docs.joinmastodon.org/methods/streaming/#hashtag-local)'
      parameters:
      - name: tag
        in: query
        description: required String. The name of the hashtag to watch.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Streaming'
          description: The streaming response.
      security:
      - BearerAuth: []
  /api/v1/streaming/hashtag:
    get:
      tags:
      - streaming
      summary: Returns all public statuses for a particular hashtag
      description: 'Returns all public statuses for a particular hashtag

        ## Version history


        - 1.0.0 - added

        - 3.5.0 - now returns status.update

        - 4.2.0 - changed to require a User token, removing Public and App token access
        #23989


        [Watch the public timeline for a hashtag](https://docs.joinmastodon.org/methods/streaming/#hashtag)'
      parameters:
      - name: tag
        in: query
        description: required String. The name of the hashtag to watch.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Streaming'
          description: The streaming response.
      security:
      - BearerAuth: []
  /api/v1/streaming/public/remote:
    get:
      tags:
      - streaming
      summary: Returns all public statuses from remote servers.
      description: 'Returns all public statuses from remote servers.

        ## Version history


        - 3.1.4 - added

        - 3.5.0 - now returns status.update

        - 4.2.0 - changed to require a User token, removing Public and App token access
        #23989


        [Watch for remote statuses](https://docs.joinmastodon.org/methods/streaming/#public-remote)'
      parameters:
      - name: only_media
        in: query
        description: Boolean. If true, return only statuses with media attachments.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Streaming'
          description: The streaming response.
      security:
      - BearerAuth: []
  /api/v1/streaming/public/local:
    get:
      tags:
      - streaming
      summary: Returns all local public statuses
      description: 'Returns all local public statuses

        ## Version history


        - 1.1.0 - added

        - 2.4.0 - add only_media parameter

        - 3.5.0 - now returns status.update

        - 4.2.0 - changed to require a User token, removing Public and App token access
        #23989


        [Watch the local timeline](https://docs.joinmastodon.org/methods/streaming/#public-local)'
      parameters:
      - name: only_media
        in: query
        description: Boolean. If true, return only statuses with media attachments.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Streaming'
          description: The streaming response.
      security:
      - BearerAuth: []
  /api/v1/streaming/public:
    get:
      tags:
      - streaming
      summary: Returns all public statuses
      description: 'Returns all public statuses

        ## Version history


        - 1.0.0 - added

        - 2.4.0 - add only_media parameter

        - 3.5.0 - now returns status.update

        - 4.2.0 - changed to require a User token, removing Public and App token access
        #23989


        [Watch the federated timeline](https://docs.joinmastodon.org/methods/streaming/#public)'
      parameters:
      - name: only_media
        in: query
        description: Boolean. If true, return only statuses with media attachments.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Streaming'
          description: The streaming response.
      security:
      - BearerAuth: []
  /api/v1/streaming/user/notification:
    get:
      tags:
      - streaming
      summary: Returns events for received notifications
      description: 'Returns events for received notifications

        ## Version history


        - 1.4.2 - added


        [Watch your notifications](https://docs.joinmastodon.org/methods/streaming/#notification)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Streaming'
          description: The streaming response.
      security:
      - BearerAuth: []
  /api/v1/streaming/user:
    get:
      tags:
      - streaming
      summary: Returns events that are relevant to the authorized user, i.e. home
        timeline and notifications
      description: 'Returns events that are relevant to the authorized user, i.e.
        home timeline and notifications

        ## Version history


        - 1.0.0 - added

        - 1.4.2 - now returns notification

        - 2.4.3 - now returns filters_changed

        - 3.1.0 - now returns announcement, announcement.reaction, announcement.delete

        - 3.5.0 - now returns status.update


        [Watch your home timeline and notifications](https://docs.joinmastodon.org/methods/streaming/#user)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Streaming'
          description: The streaming response.
      security:
      - BearerAuth: []
  /api/v1/streaming/health:
    get:
      tags:
      - streaming
      summary: Verify that the streaming service is alive before connecting to it
      description: 'Verify that the streaming service is alive before connecting to
        it

        ## Version history


        - 2.5.0 - added


        [Check if the server is alive](https://docs.joinmastodon.org/methods/streaming/#health)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Streaming'
          description: The streaming response.
  /api/v2/notifications/unread_count:
    get:
      tags:
      - grouped notifications
      summary: 'Get the (capped) number of unread notification groups for the current
        user.

        A notification is considered unread if it is more recent than the notifications
        read marker.

        Because the count is dependant on the parameters, it is computed every time
        and is thus a relatively slow operation (although faster than getting the
        full corresponding notifications), therefore the number of returned notifications
        is capped.'
      description: 'Get the (capped) number of unread notification groups for the
        current user.

        A notification is considered unread if it is more recent than the notifications
        read marker.

        Because the count is dependant on the parameters, it is computed every time
        and is thus a relatively slow operation (although faster than getting the
        full corresponding notifications), therefore the number of returned notifications
        is capped.


        [Get the number of unread notifications](https://docs.joinmastodon.org/methods/grouped_notifications/#unread-group-count)'
      parameters:
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 100
          notifications. Max 1000 notifications.
        schema:
          type: string
      - name: types[]
        in: query
        description: Array of String. Types of notifications that should count towards
          unread notifications.
        schema:
          type: string
      - name: exclude_types[]
        in: query
        description: Array of String. Types of notifications that should not count
          towards unread notifications.
        schema:
          type: string
      - name: account_id
        in: query
        description: String. Only count unread notifications received from the specified
          account.
        schema:
          type: string
      - name: grouped_types[]
        in: query
        description: Array of String. Restrict which notification types can be grouped.
          Use this if there are notification types for which your client does not
          support grouping. If omitted, the server will group notifications of all
          types it supports (currently, favourite, follow and reblog). If you do not
          want any notification grouping, use GET /api/v1/notifications/unread_count
          instead.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The response body contains the capped count of unread notifications.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v2/notifications/:group_key/accounts:
    get:
      tags:
      - grouped notifications
      description: '


        [Get accounts of all notifications in a notification group](https://docs.joinmastodon.org/methods/grouped_notifications/#get-group-accounts)'
      parameters:
      - name: :group_key
        in: path
        description: required String. The group key of the notifications to get accounts
          from.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v2/notifications/:group_key/dismiss:
    post:
      tags:
      - grouped notifications
      summary: Dismiss a single notification group from the server.
      description: 'Dismiss a single notification group from the server.


        [Dismiss a single notification group](https://docs.joinmastodon.org/methods/grouped_notifications/#dismiss-group)'
      parameters:
      - name: :group_key
        in: path
        description: required String. The group key of the notifications to discard.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Upon a successful request, notifications with the given group
            key are successfully dismissed.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v2/notifications/:group_key:
    get:
      tags:
      - grouped notifications
      summary: View information about a specific notification group with a given group
        key.
      description: 'View information about a specific notification group with a given
        group key.


        [Get a single notification group](https://docs.joinmastodon.org/methods/grouped_notifications/#get-notification-group)'
      parameters:
      - name: :group_key
        in: path
        description: required String. The group key of the notification group.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: On success, returns a GroupedNotificationsResults with a single
            notification group.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v2/notifications:
    get:
      tags:
      - grouped notifications
      summary: Return grouped notifications concerning the user. This API returns
        Link headers containing links to the next/previous page. However, the links
        can also be constructed dynamically using query params and id values.
      description: 'Return grouped notifications concerning the user. This API returns
        Link headers containing links to the next/previous page. However, the links
        can also be constructed dynamically using query params and id values.

        Notifications of type favourite, follow or reblog with the same type and the
        same target made in a similar timeframe are given a same group_key by the
        server, and querying this endpoint will return aggregated notifications, with
        only one object per group_key. Other notification types may be grouped in
        the future. The grouped_types parameter should be used by the client to explictely
        list the types it supports showing grouped notifications for.

        Types to filter include:


        [Get all grouped notifications](https://docs.joinmastodon.org/methods/grouped_notifications/#get-grouped)'
      parameters:
      - name: max_id
        in: query
        description: String. All results returned will be about notifications strictly
          older than this notification ID. In effect, sets an upper bound on results.
        schema:
          type: string
      - name: since_id
        in: query
        description: String. All results returned will be about notifications strictly
          newer than this notification ID. In effect, sets a lower bound on results.
        schema:
          type: string
      - name: min_id
        in: query
        description: String. Returns results about notifications immediately newer
          than this notification ID. In effect, sets a cursor at this ID and paginates
          forward.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 40
          notifications. Max 80 notification groups.
        schema:
          type: string
      - name: types[]
        in: query
        description: Array of String. Types to include in the result.
        schema:
          type: string
      - name: exclude_types[]
        in: query
        description: Array of String. Types to exclude from the results.
        schema:
          type: string
      - name: account_id
        in: query
        description: String. Return only notifications received from the specified
          account.
        schema:
          type: string
      - name: expand_accounts
        in: query
        description: String. One of full (default) or partial_avatars. When set to
          partial_avatars, some accounts will not be rendered in full in the returned
          accounts list but will be instead returned in stripped-down form in the
          partial_accounts list. The most recent account in a notification group is
          always rendered in full in the accounts attribute.
        schema:
          type: string
      - name: grouped_types[]
        in: query
        description: "Array of String. Restrict which notification types can be grouped.\
          \ Use this if there are notification types for which your client does not\
          \ support grouping. If omitted, the server will group notifications of all\
          \ types it supports (currently, favourite, follow and reblog). If you do\
          \ not want any notification grouping, use GET /api/v1/notifications instead.\
          \ Notifications that would be grouped if not for this parameter will instead\
          \ be returned as individual single-notification groups with a unique group_key\
          \ that can be assumed to be of the form ungrouped-{notification_id}. Please\
          \ note that neither the streaming API nor the individual notification APIs\
          \ are aware of this parameter and will always include a \u201Cproper\u201D\
          \ group_key that can be different from what is returned here, meaning that\
          \ you may have to ignore group_key for such notifications that you do not\
          \ want grouped and use ungrouped-{notification_id} instead for consistency."
        schema:
          type: string
      - name: include_filtered
        in: query
        description: "Boolean. Whether to include notifications filtered by the user\u2019\
          s NotificationPolicy. Defaults to false."
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The response body contains one page of grouped notifications.
            You can use the HTTP Link header for further pagination.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/notifications/requests/merged:
    get:
      tags:
      - notifications
      summary: 'Check whether accepted notification requests have been merged.

        Accepting notification requests schedules a background job to merge the filtered
        notifications back into the normal notification list. When that process has
        finished, the client should refresh the notifications list at its earliest
        convenience. This is communicated by the notifications_merged streaming event
        but can also be polled using this endpoint.'
      description: "Check whether accepted notification requests have been merged.\n\
        Accepting notification requests schedules a background job to merge the filtered\
        \ notifications back into the normal notification list. When that process\
        \ has finished, the client should refresh the notifications list at its earliest\
        \ convenience. This is communicated by the notifications_merged streaming\
        \ event but can also be polled using this endpoint.\n*Returns: Hash with a\
        \ single boolean attribute mergedOAuth: User token + read:notificationsVersion\
        \ history:4.3.0 - added\nA successful call returns whether the notifications\
        \ have been merged and are ready for being loaded.\nInvalid or missing Authorization\
        \ header.\nJoin Mastodon \xB7 Blog \xB7 \nView source \xB7 CC BY-SA 4.0 \xB7\
        \ Imprint\n\n[Check if accepted notification requests have been merged](https://docs.joinmastodon.org/methods/notifications/#requests-merged)"
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: A successful call returns whether the notifications have been
            merged and are ready for being loaded.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
  /api/v1/notifications/requests/dismiss:
    post:
      tags:
      - notifications
      summary: Dismiss multiple notification requests, which hides them and prevent
        them from contributing to the pending notification requests count.
      description: 'Dismiss multiple notification requests, which hides them and prevent
        them from contributing to the pending notification requests count.

        ## Version history


        - 4.3.0 - added


        [Dismiss multiple notification requests](https://docs.joinmastodon.org/methods/notifications/#dismiss-multiple-requests)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: A successful call will return an empty object.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/notifications/requests/accept:
    post:
      tags:
      - notifications
      summary: Accepts multiple notification requests, which merges the filtered notifications
        from those users back into the main notifications and accepts any future notification
        from them.
      description: 'Accepts multiple notification requests, which merges the filtered
        notifications from those users back into the main notifications and accepts
        any future notification from them.

        ## Version history


        - 4.3.0 - added


        [Accept multiple notification requests](https://docs.joinmastodon.org/methods/notifications/#accept-multiple-requests)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: A successful call will return an empty object.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/notifications/requests/:id/dismiss:
    post:
      tags:
      - notifications
      summary: Dismiss a notification request, which hides it and prevent it from
        contributing to the pending notification requests count.
      description: 'Dismiss a notification request, which hides it and prevent it
        from contributing to the pending notification requests count.

        ## Version history


        - 4.3.0 - added


        [Dismiss a single notification request](https://docs.joinmastodon.org/methods/notifications/#dismiss-request)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Notification in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: A successful call will return an empty object.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/notifications/requests/:id/accept:
    post:
      tags:
      - notifications
      summary: Accept a notification request, which merges the filtered notifications
        from that user back into the main notification and accepts any future notification
        from them.
      description: 'Accept a notification request, which merges the filtered notifications
        from that user back into the main notification and accepts any future notification
        from them.

        ## Version history


        - 4.3.0 - added


        [Accept a single notification request](https://docs.joinmastodon.org/methods/notifications/#accept-request)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Notification in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: A successful call will return an empty object.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/notifications/requests/:id:
    get:
      tags:
      - notifications
      summary: View information about a notification request with a given ID.
      description: 'View information about a notification request with a given ID.

        ## Version history


        - 4.3.0 - added


        [Get a single notification request](https://docs.joinmastodon.org/methods/notifications/#get-one-request)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Notification in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: A single notification request.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/notifications/requests:
    get:
      tags:
      - notifications
      summary: "Notification requests for notifications filtered by the user\u2019\
        s policy. This API returns Link headers containing links to the next/previous\
        \ page."
      description: "Notification requests for notifications filtered by the user\u2019\
        s policy. This API returns Link headers containing links to the next/previous\
        \ page.\n## Version history\n\n- 4.3.0 - added\n\n[Get all notification requests](https://docs.joinmastodon.org/methods/notifications/#get-requests)"
      parameters:
      - name: max_id
        in: query
        description: String. All results returned will be lesser than this ID. In
          effect, sets an upper bound on results.
        schema:
          type: string
      - name: since_id
        in: query
        description: String. All results returned will be greater than this ID. In
          effect, sets a lower bound on results.
        schema:
          type: string
      - name: min_id
        in: query
        description: String. Returns results immediately newer than this ID. In effect,
          sets a cursor at this ID and paginates forward.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 40
          notification requests. Max 80 notification requests.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The response body contains one page of notification requests.
            You can use the HTTP Link header for further pagination.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v2/notifications/policy:
    get:
      tags:
      - notifications
      summary: Notifications filtering policy for the user.
      description: 'Notifications filtering policy for the user.

        ## Version history


        - 4.3.0 - added


        [Get the filtering policy for notifications](https://docs.joinmastodon.org/methods/notifications/#get-policy)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The response body contains the current notifications filtering
            policy for the user.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/notifications/unread_count:
    get:
      tags:
      - notifications
      summary: 'Get the (capped) number of unread notifications for the current user.

        A notification is considered unread if it is more recent than the notifications
        read marker.

        Because the count is dependant on the parameters, it is computed every time
        and is thus a relatively slow operation (although faster than getting the
        full corresponding notifications), therefore the number of returned notifications
        is capped.'
      description: 'Get the (capped) number of unread notifications for the current
        user.

        A notification is considered unread if it is more recent than the notifications
        read marker.

        Because the count is dependant on the parameters, it is computed every time
        and is thus a relatively slow operation (although faster than getting the
        full corresponding notifications), therefore the number of returned notifications
        is capped.

        ## Version history


        - 4.3.0 - added


        [Get the number of unread notifications](https://docs.joinmastodon.org/methods/notifications/#unread-count)'
      parameters:
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 100
          notifications. Max 1000 notifications.
        schema:
          type: string
      - name: types[]
        in: query
        description: Array of String. Types of notifications that should count towards
          unread notifications.
        schema:
          type: string
      - name: exclude_types[]
        in: query
        description: Array of String. Types of notifications that should not count
          towards unread notifications.
        schema:
          type: string
      - name: account_id
        in: query
        description: String. Only count unread notifications received from the specified
          account.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The response body contains the capped count of unread notifications.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/notifications/dismiss:
    post:
      tags:
      - notifications
      summary: Dismiss a single notification from the server.
      description: 'Dismiss a single notification from the server.

        ## Version history


        - 0.0.0 - available

        - 1.3.0 - deprecated in favor of notifications/:id/dismiss

        - 3.0.0 - removed


        [Dismiss a single notification removed](https://docs.joinmastodon.org/methods/notifications/#dismiss-deprecated)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Notification with given ID successfully dismissed
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/notifications/:id/dismiss:
    post:
      tags:
      - notifications
      summary: Dismiss a single notification from the server.
      description: 'Dismiss a single notification from the server.

        ## Version history


        - 1.3.0 - added


        [Dismiss a single notification](https://docs.joinmastodon.org/methods/notifications/#dismiss)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Notification in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Notification with given ID successfully dismissed
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/notifications/clear:
    post:
      tags:
      - notifications
      summary: Clear all notifications from the server.
      description: 'Clear all notifications from the server.

        ## Version history


        - 0.0.0 - added


        [Dismiss all notifications](https://docs.joinmastodon.org/methods/notifications/#clear)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Notifications successfully cleared.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/notifications/:id:
    get:
      tags:
      - notifications
      summary: View information about a notification with a given ID.
      description: 'View information about a notification with a given ID.

        ## Version history


        - 0.0.0 - added


        [Get a single notification](https://docs.joinmastodon.org/methods/notifications/#get-one)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Notification in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: A single Notification
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/notifications:
    get:
      tags:
      - notifications
      summary: Notifications concerning the user. This API returns Link headers containing
        links to the next/previous page. However, the links can also be constructed
        dynamically using query params and id values.
      description: 'Notifications concerning the user. This API returns Link headers
        containing links to the next/previous page. However, the links can also be
        constructed dynamically using query params and id values.

        Types to filter include:

        ## Version history


        - 0.0.0 - added

        - 2.6.0 - added min_id

        - 2.9.0 - added account_id

        - 3.1.0 - added follow_request type

        - 3.3.0 - added status type; both min_id and max_id can be used at the same
        time now

        - 3.5.0 - added types; add update and admin.sign_up types

        - 4.0.0 - added admin.report type

        - 4.1.0 - notification limit changed from 15 (max 30) to 40 (max 80)

        - 4.3.0 - added include_filtered parameter


        [Get all notifications](https://docs.joinmastodon.org/methods/notifications/#get)'
      parameters:
      - name: max_id
        in: query
        description: String. All results returned will be lesser than this ID. In
          effect, sets an upper bound on results.
        schema:
          type: string
      - name: since_id
        in: query
        description: String. All results returned will be greater than this ID. In
          effect, sets a lower bound on results.
        schema:
          type: string
      - name: min_id
        in: query
        description: String. Returns results immediately newer than this ID. In effect,
          sets a cursor at this ID and paginates forward.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 40
          notifications. Max 80 notifications.
        schema:
          type: string
      - name: types[]
        in: query
        description: Array of String. Types to include in the result.
        schema:
          type: string
      - name: exclude_types[]
        in: query
        description: Array of String. Types to exclude from the results.
        schema:
          type: string
      - name: account_id
        in: query
        description: String. Return only notifications received from the specified
          account.
        schema:
          type: string
      - name: include_filtered
        in: query
        description: "Boolean. Whether to include notifications filtered by the user\u2019\
          s NotificationPolicy. Defaults to false."
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The response body contains one page of notifications. You can
            use the HTTP Link header for further pagination.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/push/subscription:
    post:
      tags:
      - push
      summary: Add a Web Push API subscription to receive notifications. Each access
        token can have one push subscription. If you create a new subscription, the
        old subscription is deleted.
      description: 'Add a Web Push API subscription to receive notifications. Each
        access token can have one push subscription. If you create a new subscription,
        the old subscription is deleted.

        ## Version history


        - 2.4.0 - added

        - 3.3.0 - added data[alerts][status]

        - 3.4.0 - added data[policy]

        - 3.5.0 - added data[alerts][update] and data[alerts][admin.sign_up]

        - 4.0.0 - added data[alerts][admin.report]

        - 4.3.0 - added stricter request parameter validation, invalid endpoint URLs
        and subscription keys will now result in an error, previously these would
        be accepted, but silently fail.


        [Subscribe to push notifications](https://docs.joinmastodon.org/methods/push/#create)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: A new PushSubscription has been generated, which will send
            the requested alerts to your endpoint.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/search:
    get:
      tags:
      - search
      description: '

        ## Version history


        - 51.5.0 - now requires authentication

        - 2.4.1 - deprecated in favor of v2 search

        - 2.8.0 - added limit, pagination, and account options

        - 3.0.0 - removed; use v2 search instead


        [Perform a search (v1) removed](https://docs.joinmastodon.org/methods/search/#v1)'
      parameters:
      - name: q
        in: query
        description: required String. The search query.
        required: true
        schema:
          type: string
      - name: type
        in: query
        description: String. Specify whether to search for only accounts, hashtags,
          statuses
        schema:
          type: string
      - name: resolve
        in: query
        description: Boolean. Attempt WebFinger lookup? Defaults to false.
        schema:
          type: string
      - name: account_id
        in: query
        description: String. If provided, will only return statuses authored by this
          account.
        schema:
          type: string
      - name: max_id
        in: query
        description: String. All results returned will be lesser than this ID. In
          effect, sets an upper bound on results.
        schema:
          type: string
      - name: min_id
        in: query
        description: String. Returns results immediately newer than this ID. In effect,
          sets a cursor at this ID and paginates forward.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return, per type. Defaults
          to 20 results per category. Max 40 results per category.
        schema:
          type: string
      - name: offset
        in: query
        description: Integer. Offset in search results, used for pagination. Defaults
          to 0.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: v1 search was deprecated because hashtags were returned as
            strings instead of as Tag entities.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v2/search:
    get:
      tags:
      - search
      description: '

        ## Version history


        - 2.4.1 - added, limit hardcoded to

        - 52.8.0 - add type, limit, offset, min_id, max_id, account_id

        - 3.0.0 - add exclude_unreviewed param

        - 3.3.0 - min_id and max_id can be used together

        - 4.0.0 - no longer requires a user token. Without a valid user token, you
        cannot use the resolve or offset parameters.


        [Perform a search](https://docs.joinmastodon.org/methods/search/#v2)'
      parameters:
      - name: q
        in: query
        description: required String. The search query.
        required: true
        schema:
          type: string
      - name: type
        in: query
        description: String. Specify whether to search for only accounts, hashtags,
          statuses
        schema:
          type: string
      - name: resolve
        in: query
        description: Boolean. Only relevant if type includes accounts. If true and
          (a) the search query is for a remote account (e.g., someaccount@someother.server)
          and (b) the local server does not know about the account, WebFinger is used
          to try and resolve the account at someother.server. This provides the best
          recall at higher latency. If false only accounts the server knows about
          are returned.
        schema:
          type: string
      - name: following
        in: query
        description: Boolean. Only include accounts that the user is following? Defaults
          to false.
        schema:
          type: string
      - name: account_id
        in: query
        description: String. If provided, will only return statuses authored by this
          account.
        schema:
          type: string
      - name: exclude_unreviewed
        in: query
        description: Boolean. Filter out unreviewed tags? Defaults to false. Use true
          when trying to find trending tags.
        schema:
          type: string
      - name: max_id
        in: query
        description: String. All results returned will be lesser than this ID. In
          effect, sets an upper bound on results.
        schema:
          type: string
      - name: min_id
        in: query
        description: String. Returns results immediately newer than this ID. In effect,
          sets a cursor at this ID and paginates forward.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return, per type. Defaults
          to 20 results per category. Max 40 results per category.
        schema:
          type: string
      - name: offset
        in: query
        description: Integer. Skip the first n results.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: "Truncated results of a sample search for \u201Ccats\u201D\
            \ with limit=2."
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/instance:
    get:
      tags:
      - instance
      summary: Obtain general information about the server. See api/v2/instance instead.
      description: 'Obtain general information about the server. See api/v2/instance
        instead.

        ## Version history


        - 1.1.0 - added

        - 3.0.0 - requires user token if instance is in whitelist mode

        - 3.1.4 - added invites_enabled to response

        - 3.4.0 - added rules

        - 3.4.2 - added configuration

        - 4.0.0 - deprecated. added configuration[accounts].


        [View server information (v1) deprecated](https://docs.joinmastodon.org/methods/instance/#v1)'
      deprecated: true
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: "Join Mastodon \xB7 Blog \xB7 "
  /api/v1/instance/translation_languages:
    get:
      tags:
      - instance
      summary: Translation language pairs supported by the translation engine used
        by the server.
      description: 'Translation language pairs supported by the translation engine
        used by the server.

        ## Version history


        - 4.2.0 - added


        [View translation languages](https://docs.joinmastodon.org/methods/instance/#translation_languages)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: All source and target language pairs supported by the server.
  /api/v1/instance/extended_description:
    get:
      tags:
      - instance
      summary: Obtain an extended description of this server
      description: 'Obtain an extended description of this server

        ## Version history


        - 4.0.0 - added


        [View extended description](https://docs.joinmastodon.org/methods/instance/#extended_description)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: "Join Mastodon \xB7 Blog \xB7 "
  /api/v1/instance/domain_blocks:
    get:
      tags:
      - instance
      summary: Obtain a list of domains that have been blocked.
      description: 'Obtain a list of domains that have been blocked.

        ## Version history


        - 4.0.0 - added


        [View moderated servers](https://docs.joinmastodon.org/methods/instance/#domain_blocks)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The complete list of domains blocked by this instance
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header, if the admin has chosen
            to show domain blocks to users.
        404:
          $ref: '#/components/responses/Error'
          description: The admin has chosen to show domain blocks to no one. The response
            body is empty; only the HTTP 404 error code is relevant.
      security:
      - BearerAuth: []
  /api/v1/instance/rules:
    get:
      tags:
      - instance
      summary: Rules that the users of this service should follow.
      description: 'Rules that the users of this service should follow.

        ## Version history


        - 3.4.0 - added


        [List of rules](https://docs.joinmastodon.org/methods/instance/#rules)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: "Join Mastodon \xB7 Blog \xB7 "
  /api/v1/instance/activity:
    get:
      tags:
      - instance
      summary: Instance activity over the last 3 months, binned weekly.
      description: 'Instance activity over the last 3 months, binned weekly.

        ## Version history


        - 2.1.2 - added

        - 3.0.0 - requires user token if instance is in whitelist mode


        [Weekly activity](https://docs.joinmastodon.org/methods/instance/#activity)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: 'Each hash in the array will contain the following attributes:'
        401:
          $ref: '#/components/responses/Error'
          description: If the instance is in whitelist mode and the Authorization
            header is missing or invalid
      security:
      - BearerAuth: []
  /api/v1/instance/peers:
    get:
      tags:
      - instance
      summary: Domains that this instance is aware of.
      description: 'Domains that this instance is aware of.

        ## Version history


        - 2.1.2 - added

        - 3.0.0 - requires user token if instance is in whitelist mode


        [List of connected domains](https://docs.joinmastodon.org/methods/instance/#peers)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: If the instance is in whitelist mode and the Authorization
            header is missing or invalid
        401:
          $ref: '#/components/responses/Error'
          description: If the instance is in whitelist mode and the Authorization
            header is missing or invalid
      security:
      - BearerAuth: []
  /api/v2/instance:
    get:
      tags:
      - instance
      summary: Obtain general information about the server.
      description: 'Obtain general information about the server.

        ## Version history


        - 4.0.0 - added

        - 4.3.0 - added configuration.vapid.public_key


        [View server information](https://docs.joinmastodon.org/methods/instance/#v2)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: "Join Mastodon \xB7 Blog \xB7 "
  /api/v1/trends/links:
    get:
      tags:
      - trends
      summary: Links that have been shared more than others.
      description: 'Links that have been shared more than others.

        ## Version history


        - 3.5.0 - added


        [View trending links](https://docs.joinmastodon.org/methods/trends/#links)'
      parameters:
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 10
          links. Max 20 links.
        schema:
          type: string
      - name: offset
        in: query
        description: Integer. Skip the first n results.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: "Join Mastodon \xB7 Blog \xB7 "
  /api/v1/trends/statuses:
    get:
      tags:
      - trends
      summary: Statuses that have been interacted with more than others.
      description: 'Statuses that have been interacted with more than others.

        ## Version history


        - 3.5.0 - added


        [View trending statuses](https://docs.joinmastodon.org/methods/trends/#statuses)'
      parameters:
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 20
          statuses. Max 40 statuses.
        schema:
          type: string
      - name: offset
        in: query
        description: Integer. Skip the first n results.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: "Join Mastodon \xB7 Blog \xB7 "
  /api/v1/trends/tags:
    get:
      tags:
      - trends
      summary: Tags that are being used more frequently within the past week.
      description: 'Tags that are being used more frequently within the past week.

        ## Version history


        - 3.0.0 - added

        - 3.5.0 - method signature changed from GET /api/v1/trends to GET /api/v1/trends/tags.
        The former is a deprecated alias that may be removed in the future.


        [View trending tags](https://docs.joinmastodon.org/methods/trends/#tags)'
      parameters:
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 10
          tags. Max 20 tags.
        schema:
          type: string
      - name: offset
        in: query
        description: Integer. Skip the first n results.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: "Join Mastodon \xB7 Blog \xB7 "
  /api/v1/directory:
    get:
      tags:
      - directory
      summary: List accounts visible in the directory.
      description: 'List accounts visible in the directory.

        ## Version history


        - 3.0.0 - added


        [View profile directory](https://docs.joinmastodon.org/methods/directory/#get)'
      parameters:
      - name: offset
        in: query
        description: Number. Skip the first n results.
        schema:
          type: string
      - name: limit
        in: query
        description: Number. How many accounts to load. Defaults to 40 accounts. Max
          80 accounts.
        schema:
          type: string
      - name: order
        in: query
        description: String. Use active to sort by most recently posted statuses (default)
          or new to sort by most recently created profiles.
        schema:
          type: string
      - name: local
        in: query
        description: Boolean. If true, returns only local accounts.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Sample results with limit=2
  /api/v1/custom_emojis:
    get:
      tags:
      - custom_emojis
      summary: Returns custom emojis that are available on the server.
      description: 'Returns custom emojis that are available on the server.

        ## Version history


        - 2.0.0 - added

        - 3.0.0 - optional category added to response


        [View all custom emoji](https://docs.joinmastodon.org/methods/custom_emojis/#get)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Sample response from mastodon.social
  /api/v1/announcements/:id/reactions/:name:
    put:
      tags:
      - announcements
      summary: React to an announcement with an emoji.
      description: 'React to an announcement with an emoji.

        ## Version history


        - 3.1.0 - added


        [Add a reaction to an announcement](https://docs.joinmastodon.org/methods/announcements/#put-reactions)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Announcement in the database.
        required: true
        schema:
          type: string
      - name: :name
        in: path
        description: required String. Unicode emoji, or the shortcode of a custom
          emoji.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: Announcement with given ID does not exist
        422:
          $ref: '#/components/responses/Error'
          description: "Join Mastodon \xB7 Blog \xB7 "
      security:
      - BearerAuth: []
  /api/v1/announcements/:id/dismiss:
    post:
      tags:
      - announcements
      summary: Allows a user to mark the announcement as read.
      description: 'Allows a user to mark the announcement as read.

        ## Version history


        - 3.1.0 - added


        [Dismiss an announcement](https://docs.joinmastodon.org/methods/announcements/#dismiss)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Announcement in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
        404:
          $ref: '#/components/responses/Error'
          description: Announcement with given ID does not exist
      security:
      - BearerAuth: []
  /api/v1/announcements:
    get:
      tags:
      - announcements
      summary: See all currently active announcements set by admins.
      description: 'See all currently active announcements set by admins.

        ## Version history


        - 3.1.0 - added


        [View all announcements](https://docs.joinmastodon.org/methods/announcements/#get)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Currently active announcements
        401:
          $ref: '#/components/responses/Error'
          description: Invalid or missing Authorization header.
      security:
      - BearerAuth: []
  /api/v1/admin/accounts/:id/unsensitive:
    post:
      tags:
      - accounts
      summary: "Stops marking an account\u2019s posts as sensitive, if it was previously\
        \ flagged as sensitive."
      description: "Stops marking an account\u2019s posts as sensitive, if it was\
        \ previously flagged as sensitive.\n## Version history\n\n- 3.3.0 - added\n\
        - 4.0.0 - support custom roles and permissions\n\n[Unmark an account as sensitive](https://docs.joinmastodon.org/methods/admin/accounts/#unsensitive)"
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The account is no longer marked as sensitive, or was already
            not marked as sensitive.
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
        404:
          $ref: '#/components/responses/Error'
          description: Account does not exist
      security:
      - BearerAuth: []
  /api/v1/admin/accounts/:id/unsuspend:
    post:
      tags:
      - accounts
      summary: Unsuspend a currently suspended account.
      description: 'Unsuspend a currently suspended account.

        ## Version history


        - 2.9.1 - added

        - 4.0.0 - support custom roles and permissions


        [Unsuspend an account](https://docs.joinmastodon.org/methods/admin/accounts/#unsuspend)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Account successfully unsuspended
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header, or Account is not currently suspended
        404:
          $ref: '#/components/responses/Error'
          description: Account does not exist
      security:
      - BearerAuth: []
  /api/v1/admin/accounts/:id/unsilence:
    post:
      tags:
      - accounts
      summary: Unsilence an account if it is currently silenced.
      description: 'Unsilence an account if it is currently silenced.

        ## Version history


        - 2.9.1 - added

        - 4.0.0 - support custom roles and permissions


        [Unsilence an account](https://docs.joinmastodon.org/methods/admin/accounts/#unsilence)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Account was unsilenced, or was already not silenced
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
        404:
          $ref: '#/components/responses/Error'
          description: Account does not exist
      security:
      - BearerAuth: []
  /api/v1/admin/accounts/:id/enable:
    post:
      tags:
      - accounts
      summary: Re-enable a local account whose login is currently disabled.
      description: 'Re-enable a local account whose login is currently disabled.

        ## Version history


        - 2.9.1 - added

        - 4.0.0 - support custom roles and permissions


        [Enable a currently disabled account](https://docs.joinmastodon.org/methods/admin/accounts/#enable)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Account was enabled, or was already enabled.
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
        404:
          $ref: '#/components/responses/Error'
          description: Account does not exist
      security:
      - BearerAuth: []
  /api/v1/admin/accounts/:id/action:
    post:
      tags:
      - accounts
      summary: Perform an action against an account and log this action in the moderation
        history. Also resolves any open reports against this account.
      description: 'Perform an action against an account and log this action in the
        moderation history. Also resolves any open reports against this account.

        ## Version history


        - 2.9.1 - added

        - 3.3.0 - add sensitive as a possible type

        - 4.0.0 - support custom roles and permissions


        [Perform an action against an account](https://docs.joinmastodon.org/methods/admin/accounts/#action)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The action was successfully taken
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
        404:
          $ref: '#/components/responses/Error'
          description: Account or Report with given ID does not exist
        422:
          $ref: '#/components/responses/Error'
          description: type is not provided or is not understood
      security:
      - BearerAuth: []
  /api/v1/admin/accounts/:id:
    get:
      tags:
      - accounts
      summary: View admin-level information about the given account.
      description: 'View admin-level information about the given account.

        ## Version history


        - 2.9.1 - added

        - 4.0.0 - support custom roles and permissions


        [View a specific account](https://docs.joinmastodon.org/methods/admin/accounts/#get-one)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
        404:
          $ref: '#/components/responses/Error'
          description: Account does not exist
      security:
      - BearerAuth: []
  /api/v1/admin/accounts/:id/reject:
    post:
      tags:
      - accounts
      summary: Reject the given local account if it is currently pending approval.
      description: 'Reject the given local account if it is currently pending approval.

        ## Version history


        - 2.9.1 - added

        - 4.0.0 - support custom roles and permissions


        [Reject a pending account](https://docs.joinmastodon.org/methods/admin/accounts/#reject)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header, or the account is not currently pending.
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header, or the account is not currently pending.
        404:
          $ref: '#/components/responses/Error'
          description: Account does not exist
      security:
      - BearerAuth: []
  /api/v1/admin/accounts/:id/approve:
    post:
      tags:
      - accounts
      summary: Approve the given local account if it is currently pending approval.
      description: 'Approve the given local account if it is currently pending approval.

        ## Version history


        - 2.9.1 - added

        - 4.0.0 - support custom roles and permissions


        [Approve a pending account](https://docs.joinmastodon.org/methods/admin/accounts/#approve)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Account in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The account is now approved
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header, or account is currently not pending.
        404:
          $ref: '#/components/responses/Error'
          description: Account does not exist
      security:
      - BearerAuth: []
  /api/v2/admin/accounts:
    get:
      tags:
      - accounts
      summary: View all accounts, optionally matching certain criteria for filtering,
        up to 100 at a time. Pagination may be done with the HTTP Link header in the
        response. See Paginating through API responses for more information.
      description: 'View all accounts, optionally matching certain criteria for filtering,
        up to 100 at a time. Pagination may be done with the HTTP Link header in the
        response. See Paginating through API responses for more information.

        ## Version history


        - 3.5.0 - added

        - 4.0.0 - added role_ids. Support custom roles and permissions


        [View accounts (v2)](https://docs.joinmastodon.org/methods/admin/accounts/#v2)'
      parameters:
      - name: origin
        in: query
        description: String. Filter for local or remote accounts.
        schema:
          type: string
      - name: status
        in: query
        description: String. Filter for active, pending, disabled, silenced, or suspended
          accounts.
        schema:
          type: string
      - name: permissions
        in: query
        description: String. Filter for accounts with staff permissions (users that
          can manage reports).
        schema:
          type: string
      - name: role_ids[]
        in: query
        description: Array of String. Filter for users with these roles.
        schema:
          type: string
      - name: invited_by
        in: query
        description: String. Lookup users invited by the account with this ID.
        schema:
          type: string
      - name: username
        in: query
        description: String. Search for the given username.
        schema:
          type: string
      - name: display_name
        in: query
        description: String. Search for the given display name.
        schema:
          type: string
      - name: by_domain
        in: query
        description: String. Filter by the given domain.
        schema:
          type: string
      - name: email
        in: query
        description: String. Lookup a user with this email.
        schema:
          type: string
      - name: ip
        in: query
        description: String. Lookup users with this IP address.
        schema:
          type: string
      - name: max_id
        in: query
        description: String. All results returned will be lesser than this ID. In
          effect, sets an upper bound on results.
        schema:
          type: string
      - name: since_id
        in: query
        description: String. All results returned will be greater than this ID. In
          effect, sets a lower bound on results.
        schema:
          type: string
      - name: min_id
        in: query
        description: String. Returns results immediately newer than this ID. In effect,
          sets a cursor at this ID and paginates forward.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 100
          accounts. Max 200 accounts.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
      security:
      - BearerAuth: []
  /api/v1/admin/accounts:
    get:
      tags:
      - accounts
      summary: View all accounts, optionally matching certain criteria for filtering,
        up to 100 at a time. Pagination may be done with the HTTP Link header in the
        response. See Paginating through API responses for more information.
      description: 'View all accounts, optionally matching certain criteria for filtering,
        up to 100 at a time. Pagination may be done with the HTTP Link header in the
        response. See Paginating through API responses for more information.

        ## Version history


        - 2.9.1 - added

        - 3.3.0 - added sensitized

        - 4.0.0 - support custom roles and permissions


        [View accounts (v1)](https://docs.joinmastodon.org/methods/admin/accounts/#v1)'
      parameters:
      - name: local
        in: query
        description: Boolean. Filter for local accounts?
        schema:
          type: string
      - name: remote
        in: query
        description: Boolean. Filter for remote accounts?
        schema:
          type: string
      - name: active
        in: query
        description: Boolean. Filter for currently active accounts?
        schema:
          type: string
      - name: pending
        in: query
        description: Boolean. Filter for currently pending accounts?
        schema:
          type: string
      - name: disabled
        in: query
        description: Boolean. Filter for currently disabled accounts?
        schema:
          type: string
      - name: silenced
        in: query
        description: Boolean. Filter for currently silenced accounts?
        schema:
          type: string
      - name: suspended
        in: query
        description: Boolean. Filter for currently suspended accounts?
        schema:
          type: string
      - name: sensitized
        in: query
        description: Boolean. Filter for accounts force-marked as sensitive?
        schema:
          type: string
      - name: username
        in: query
        description: String. Search for the given username
        schema:
          type: string
      - name: display_name
        in: query
        description: String. Search for the given display name
        schema:
          type: string
      - name: by_domain
        in: query
        description: String. Filter by the given domain
        schema:
          type: string
      - name: email
        in: query
        description: String. Lookup a user with this email
        schema:
          type: string
      - name: ip
        in: query
        description: String. Lookup users with this IP address
        schema:
          type: string
      - name: staff
        in: query
        description: Boolean. Filter for staff accounts?
        schema:
          type: string
      - name: max_id
        in: query
        description: String. All results returned will be lesser than this ID. In
          effect, sets an upper bound on results.
        schema:
          type: string
      - name: since_id
        in: query
        description: String. All results returned will be greater than this ID. In
          effect, sets a lower bound on results.
        schema:
          type: string
      - name: min_id
        in: query
        description: String. Returns results immediately newer than this ID. In effect,
          sets a cursor at this ID and paginates forward.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 100
          accounts. Max 200 accounts.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
      security:
      - BearerAuth: []
  /api/v1/admin/canonical_email_blocks/:id:
    get:
      tags:
      - canonical_email_blocks
      description: '

        ## Version history


        - 4.0.0 - added


        [Show a single canonical email block](https://docs.joinmastodon.org/methods/admin/canonical_email_blocks/#get-one)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Admin::CanonicalEmailBlock in
          the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
        404:
          $ref: '#/components/responses/Error'
          description: Canonical email block does not exist or was already deleted
      security:
      - BearerAuth: []
  /api/v1/admin/canonical_email_blocks:
    get:
      tags:
      - canonical_email_blocks
      description: '

        ## Version history


        - 4.0.0 - added


        [List all canonical email blocks](https://docs.joinmastodon.org/methods/admin/canonical_email_blocks/#get)'
      parameters:
      - name: max_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: min_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 100
          blocks. Max 200 blocks.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Because CanonicalEmailBlock IDs are generally not exposed via
            any API responses, you will have to parse the HTTP Link header to load
            older or newer results. See Paginating through API responses for more
            information.
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
      security:
      - BearerAuth: []
  /api/v1/admin/canonical_email_blocks/test:
    post:
      tags:
      - canonical_email_blocks
      summary: Canoniocalize and hash an email address.
      description: 'Canoniocalize and hash an email address.

        ## Version history


        - 4.0.0 - added


        [Test](https://docs.joinmastodon.org/methods/admin/canonical_email_blocks/#test)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: All matching canonical email blocks are returned.
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
        500:
          $ref: '#/components/responses/Error'
          description: No email was provided
      security:
      - BearerAuth: []
  /api/v1/admin/dimensions:
    post:
      tags:
      - dimensions
      summary: Obtain information about popularity of certain accounts, servers, languages,
        etc.
      description: 'Obtain information about popularity of certain accounts, servers,
        languages, etc.

        ## Version history


        - 3.5.0 - added

        - 4.0.0 - support custom roles and permissions


        [Get dimensional data](https://docs.joinmastodon.org/methods/admin/dimensions/#get)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Requesting data on mastodon.social and a given trending tag
            with a limit of 2.
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
      security:
      - BearerAuth: []
  /api/v1/admin/domain_allows/:id:
    get:
      tags:
      - domain_allows
      summary: Show information about a single allowed domain.
      description: 'Show information about a single allowed domain.

        ## Version history


        - 4.0.0 - added


        [Get a single allowed domain](https://docs.joinmastodon.org/methods/admin/domain_allows/#get-one)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
        404:
          $ref: '#/components/responses/Error'
          description: DomainAllow with the given ID does not exist
  /api/v1/admin/domain_allows:
    get:
      tags:
      - domain_allows
      summary: Show information about all allowed domains.
      description: 'Show information about all allowed domains.

        ## Version history


        - 4.0.0 - added


        [List all allowed domains](https://docs.joinmastodon.org/methods/admin/domain_allows/#get)'
      parameters:
      - name: max_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: min_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 100
          allows. Max 200 allows.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Because DomainAllow IDs are generally not exposed via any API
            responses, you will have to parse the HTTP Link header to load older or
            newer results. See Paginating through API responses for more information.
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
      security:
      - BearerAuth: []
  /api/v1/admin/domain_blocks/:id:
    get:
      tags:
      - domain_blocks
      summary: Show information about a single blocked domain.
      description: 'Show information about a single blocked domain.

        ## Version history


        - 4.0.0 - added


        [Get a single blocked domain](https://docs.joinmastodon.org/methods/admin/domain_blocks/#get-one)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
        404:
          $ref: '#/components/responses/Error'
          description: DomainBlock with the given ID does not exist
  /api/v1/admin/domain_blocks:
    get:
      tags:
      - domain_blocks
      summary: Show information about all blocked domains.
      description: 'Show information about all blocked domains.

        ## Version history


        - 4.0.0 - added


        [List all blocked domains](https://docs.joinmastodon.org/methods/admin/domain_blocks/#get)'
      parameters:
      - name: max_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: min_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 100
          blocks. Max 200 blocks.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Because DomainBlock IDs are generally not exposed via any API
            responses, you will have to parse the HTTP Link header to load older or
            newer results. See Paginating through API responses for more information.
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
      security:
      - BearerAuth: []
  /api/v1/admin/email_domain_blocks/:id:
    get:
      tags:
      - email_domain_blocks
      summary: Show information about a single email domain that is blocked from signups.
      description: 'Show information about a single email domain that is blocked from
        signups.

        ## Version history


        - 4.1.0 - added


        [Get a single blocked email domain](https://docs.joinmastodon.org/methods/admin/email_domain_blocks/#get-one)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
        404:
          $ref: '#/components/responses/Error'
          description: EmailDomainBlock with the given ID does not exist
  /api/v1/admin/email_domain_blocks:
    get:
      tags:
      - email_domain_blocks
      summary: Show information about all email domains blocked from signing up.
      description: 'Show information about all email domains blocked from signing
        up.

        ## Version history


        - 4.0.0 - added


        [List all blocked email domains](https://docs.joinmastodon.org/methods/admin/email_domain_blocks/#get)'
      parameters:
      - name: max_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: min_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 100
          blocks. Max 200 blocks.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
      security:
      - BearerAuth: []
  /api/v1/admin/ip_blocks/:id:
    get:
      tags:
      - ip_blocks
      summary: Show information about a single IP block.
      description: 'Show information about a single IP block.

        ## Version history


        - 4.0.0 - added


        [Get a single IP block](https://docs.joinmastodon.org/methods/admin/ip_blocks/#get-one)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
        404:
          $ref: '#/components/responses/Error'
          description: IpBlock with the given ID does not exist
  /api/v1/admin/ip_blocks:
    get:
      tags:
      - ip_blocks
      summary: Show information about all blocked IP ranges.
      description: 'Show information about all blocked IP ranges.

        ## Version history


        - 4.0.0 - added


        [List all IP blocks](https://docs.joinmastodon.org/methods/admin/ip_blocks/#get)'
      parameters:
      - name: max_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: min_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 100
          blocks. Max 200 blocks.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Because IpBlock IDs are generally not exposed via any API responses,
            you will have to parse the HTTP Link header to load older or newer results.
            See Paginating through API responses for more information.
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
      security:
      - BearerAuth: []
  /api/v1/admin/measures:
    post:
      tags:
      - measures
      summary: Obtain statistical measures for your server.
      description: 'Obtain statistical measures for your server.

        ## Version history


        - 3.5.0 - added

        - 4.0.0 - support custom roles and permissions


        [Get measurable data](https://docs.joinmastodon.org/methods/admin/measures/#get)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Returns quantitative data for each measure, in aggregate and
            also by data bucket.
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
      security:
      - BearerAuth: []
  /api/v1/admin/reports/:id/reopen:
    post:
      tags:
      - reports
      summary: Reopen a currently closed report, if it is closed.
      description: 'Reopen a currently closed report, if it is closed.

        ## Version history


        - 2.9.1 - added

        - 4.0.0 - support custom roles and permissions


        [Reopen a closed report](https://docs.joinmastodon.org/methods/admin/reports/#reopen)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Report in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The report no longer has an action taken, or it already had
            no action taken.
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
      security:
      - BearerAuth: []
  /api/v1/admin/reports/:id/resolve:
    post:
      tags:
      - reports
      summary: Mark a report as resolved with no further action taken.
      description: 'Mark a report as resolved with no further action taken.

        ## Version history


        - 2.9.1 - added

        - 4.0.0 - support custom roles and permissions


        [Mark report as resolved](https://docs.joinmastodon.org/methods/admin/reports/#resolve)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Report in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The report is now resolved, or it was already resolved.
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
      security:
      - BearerAuth: []
  /api/v1/admin/reports/:id/unassign:
    post:
      tags:
      - reports
      summary: Unassign a report so that someone else can claim it.
      description: 'Unassign a report so that someone else can claim it.

        ## Version history


        - 2.9.1 - added

        - 4.0.0 - support custom roles and permissions


        [Unassign report](https://docs.joinmastodon.org/methods/admin/reports/#unassign)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Report in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The report should no longer be assigned to you, or it was already
            not assigned to anyone.
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
      security:
      - BearerAuth: []
  /api/v1/admin/reports/:id/assign_to_self:
    post:
      tags:
      - reports
      summary: Claim the handling of this report to yourself.
      description: 'Claim the handling of this report to yourself.

        ## Version history


        - 2.9.1 - added

        - 4.0.0 - support custom roles and permissions


        [Assign report to self](https://docs.joinmastodon.org/methods/admin/reports/#assign_to_self)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Report in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: The report should now be assigned to you, or it was already
            assigned to you.
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
      security:
      - BearerAuth: []
  /api/v1/admin/reports/:id:
    get:
      tags:
      - reports
      description: '

        ## Version history


        - 2.9.1 - added

        - 4.0.0 - support custom roles and permissions


        [View a single report](https://docs.joinmastodon.org/methods/admin/reports/#get-one)'
      parameters:
      - name: :id
        in: path
        description: required String. The ID of the Report in the database.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
      security:
      - BearerAuth: []
  /api/v1/admin/reports:
    get:
      tags:
      - reports
      summary: View information about all reports.
      description: 'View information about all reports.

        ## Version history


        - 2.9.1 - added

        - 4.0.0 - support custom roles and permissions


        [View all reports](https://docs.joinmastodon.org/methods/admin/reports/#get)'
      parameters:
      - name: resolved
        in: query
        description: Boolean. Filter for resolved reports?
        schema:
          type: string
      - name: account_id
        in: query
        description: String. Filter for reports filed by this account.
        schema:
          type: string
      - name: target_account_id
        in: query
        description: String. Filter for reports targeting this account.
        schema:
          type: string
      - name: max_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: min_id
        in: query
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Integer. Maximum number of results to return. Defaults to 100
          reports. Max 200 reports.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Because Report IDs are generally not exposed via any API responses,
            you will have to parse the HTTP Link header to load older or newer results.
            See Paginating through API responses for more information.
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is not allowed to perform this action, or invalid
            or missing Authorization header
      security:
      - BearerAuth: []
  /api/v1/admin/retention:
    post:
      tags:
      - retention
      summary: Generate a retention data report for a given time period and bucket.
      description: 'Generate a retention data report for a given time period and bucket.

        ## Version history


        - 3.5.0 - added

        - 4.0.0 - support custom roles and permissions


        [Calculate retention data](https://docs.joinmastodon.org/methods/admin/retention/#create)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Monthly retention data for the month of 2022-09, given that
            2 users registered during 2022-09 and were active at least once during
            that month.
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
      security:
      - BearerAuth: []
  /api/v1/admin/trends/tags:
    get:
      tags:
      - trends
      summary: Tags that are being used more frequently within the past week, including
        unapproved and unreviewed tags.
      description: 'Tags that are being used more frequently within the past week,
        including unapproved and unreviewed tags.

        ## Version history


        - 3.5.0 - added

        - 4.0.0 - Returns an array of Tag due to a bug

        - 4.1.0 - Bug fixed


        [View trending tags](https://docs.joinmastodon.org/methods/admin/trends/#tags)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
      security:
      - BearerAuth: []
  /api/v1/admin/trends/statuses:
    get:
      tags:
      - trends
      summary: Statuses that have been interacted with more than others, including
        unapproved and unreviewed statuses.
      description: 'Statuses that have been interacted with more than others, including
        unapproved and unreviewed statuses.

        ## Version history


        - 3.5.0 - added


        [View trending statuses](https://docs.joinmastodon.org/methods/admin/trends/#statuses)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
      security:
      - BearerAuth: []
  /api/v1/admin/trends/links:
    get:
      tags:
      - trends
      summary: Links that have been shared more than others, including unapproved
        and unreviewed links.
      description: 'Links that have been shared more than others, including unapproved
        and unreviewed links.

        ## Version history


        - 3.5.0 - added


        [View trending links](https://docs.joinmastodon.org/methods/admin/trends/#links)'
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
        403:
          $ref: '#/components/responses/Error'
          description: Authorized user is missing a permission, or invalid or missing
            Authorization header
      security:
      - BearerAuth: []
  /api/proofs:
    get:
      tags:
      - proofs
      description: '

        ## Version history


        - 2.8.0 - added


        [View identity proofs removed](https://docs.joinmastodon.org/methods/proofs/#get)'
      parameters:
      - name: provider
        in: query
        description: String. The identity provider to be looked up. Currently only
          supports keybase (case-sensitive).
        schema:
          type: string
      - name: username
        in: query
        description: String. The username on the selected identity provider.
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: "Looking up the username \u201Cgargron\u201D via the \u201C\
            keybase\u201D provider"
        404:
          $ref: '#/components/responses/Error'
          description: No identity proof found for username on provider
  /api/oembed:
    get:
      tags:
      - oembed
      description: '

        ## Version history


        - 1.0.0 - added


        [Get OEmbed info as JSON](https://docs.joinmastodon.org/methods/oembed/#get)'
      parameters:
      - name: url
        in: query
        description: required String. URL of a status.
        required: true
        schema:
          type: string
      - name: maxwidth
        in: query
        description: Number. Width of the iframe. Defaults to 400
        schema:
          type: string
      - name: maxheight
        in: query
        description: Number. Height of the iframe. Defaults to null
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Error'
          description: "Represents OEmbed \u201Crich\u201D preview, with associated\
            \ iframe and metadata."
        404:
          $ref: '#/components/responses/Error'
          description: Status not found for given URL
components:
  responses:
    Streaming:
      description: Represents an error message.
      content:
        text/event-stream:
          schema:
            type: string
    Field:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: StringVersion
                description: "The key of a given field\u2019s key-value pair."
              value:
                type: String
                description: The value associated with the name key.
              verified_at:
                type: String
                description: "Timestamp of when the server verified a URL value for\
                  \ a rel=\u201Cme\u201D link."
                nullable: true
    MutedAccount:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              mute_expires_at:
                type: String
                description: When a timed mute will expire, if applicable.
                nullable: true
    CredentialAccount:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              source:
                type: HashVersion
                description: An extra attribute that contains source values to be
                  used with API methods that verify credentials and update credentials.
              role:
                type: RoleVersion
                description: The role assigned to the currently authorized user.
    Account:
      description: Represents a user of Mastodon and their associated profile.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The account id.
              username:
                type: StringVersion
                description: The username of the account, not including domain.
              acct:
                type: StringVersion
                description: The Webfinger account URI. Equal to username for local
                  users, or username@domain for remote users.
              url:
                type: String
                description: "The location of the user\u2019s profile page."
              display_name:
                type: StringVersion
                description: "The profile\u2019s display name."
              note:
                type: String
                description: "The profile\u2019s bio or description."
              avatar:
                type: String
                description: An image icon that is shown next to statuses and in the
                  profile.
              avatar_static:
                type: String
                description: A static version of the avatar. Equal to avatar if its
                  value is a static image; different if avatar is an animated GIF.
              header:
                type: String
                description: An image banner that is shown above the profile and in
                  profile cards.
              header_static:
                type: String
                description: A static version of the header. Equal to header if its
                  value is a static image; different if header is an animated GIF.
              locked:
                type: BooleanVersion
                description: Whether the account manually approves follow requests.
              fields:
                type: Array
                description: Additional metadata attached to a profile as name-value
                  pairs.
              emojis:
                type: Array
                description: Custom emoji entities to be used when rendering the profile.
              bot:
                type: BooleanVersion
                description: Indicates that the account may perform automated actions,
                  may not be monitored, or identifies as a robot.
              group:
                type: BooleanVersion
                description: Indicates that the account represents a Group actor.
              discoverable:
                type: BooleanVersion
                description: Whether the account has opted into discovery features
                  such as the profile directory.
                nullable: true
              noindex:
                type: BooleanVersion
                description: Whether the local user has opted out of being indexed
                  by search engines.
                nullable: true
              moved:
                type: Account,
                description: Indicates that the profile is currently inactive and
                  that its user has moved to a new account.
                nullable: true
              suspended:
                type: BooleanVersion
                description: An extra attribute returned only when an account is suspended.
              limited:
                type: BooleanVersion
                description: An extra attribute returned only when an account is silenced.
                  If true, indicates that the account should be hidden behind a warning
                  screen.
              created_at:
                type: String
                description: When the account was created.
              last_status_at:
                type: String
                description: When the most recent status was posted.
                nullable: true
              statuses_count:
                type: IntegerVersion
                description: How many statuses are attached to this account.
              followers_count:
                type: IntegerVersion
                description: The reported followers of this profile.
              following_count:
                type: IntegerVersion
                description: The reported follows of this profile.
    AccountWarning:
      description: Moderation warning against a particular account.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the account warning in the database.
              action:
                type: String
                description: Action taken against the account.
              text:
                type: StringVersion
                description: Message from the moderator to the target account.
              status_ids:
                type: Array
                description: List of status IDs that are relevant to the warning.
                  When action is mark_statuses_as_sensitive or delete_statuses, those
                  are the affected statuses.
              target_account:
                type: AccountVersion
                description: Account against which a moderation decision has been
                  taken.
              appeal:
                type: Appeal,
                description: Appeal submitted by the target account, if any.
                nullable: true
              created_at:
                type: String
                description: When the event took place.
    AdminAccount:
      description: Admin-level information about a given account.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the account in the database.
              username:
                type: StringVersion
                description: The username of the account.
              domain:
                type: String,
                description: The domain of the account, if it is remote.
                nullable: true
              created_at:
                type: String
                description: When the account was first discovered.
              email:
                type: StringVersion
                description: The email address associated with the account.
              ip:
                type: StringVersion
                description: The IP address last used to login to this account.
                nullable: true
              ips:
                type: StringVersion
                description: The IP address last used to login to this account.
                nullable: true
              locale:
                type: String
                description: The locale of the account.
              invite_request:
                type: StringVersion
                description: The reason given when requesting an invite (for instances
                  that require manual approval of registrations)
                nullable: true
              role:
                type: RoleVersion
                description: The current role of the account.
              confirmed:
                type: BooleanVersion
                description: Whether the account has confirmed their email address.
              approved:
                type: BooleanVersion
                description: Whether the account is currently approved.
              disabled:
                type: BooleanVersion
                description: Whether the account is currently disabled.
              silenced:
                type: BooleanVersion
                description: Whether the account is currently silenced.
              suspended:
                type: BooleanVersion
                description: Whether the account is currently suspended.
              account:
                type: AccountVersion
                description: User-level information about the account.
              created_by_application_id:
                type: String
                description: The ID of the Application that created this account,
                  if applicable.
              invited_by_account_id:
                type: String
                description: The ID of the Account that invited this user, if applicable.
    AdminCanonicalEmailBlock:
      description: Represents a canonical email block (hashed).
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the email block in the database.
              canonical_email_hash:
                type: String
                description: The SHA256 hash of the canonical email address.
    CohortData:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              date:
                type: String
                description: The timestamp for the start of the bucket, at midnight.
              rate:
                type: NumberVersion
                description: The percentage rate of users who registered in the specified
                  period and were active for the given date bucket.
              value:
                type: IntegerVersion
                description: How many users registered in the specified period and
                  were active for the given date bucket.
    AdminCohort:
      description: Represents a retention metric.
      content:
        application/json:
          schema:
            type: object
            properties:
              period:
                type: String
                description: The timestamp for the start of the period, at midnight.
              frequency:
                type: String
                description: The size of the bucket for the returned data.
              data:
                type: Array
                description: Retention data for users who registered during the given
                  period.
    Data:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              key:
                type: StringVersion
                description: The unique keystring for this data item.
              human_key:
                type: StringVersion
                description: A human-readable key for this data item.
              value:
                type: StringVersion
                description: The value for this data item.
              unit:
                type: StringVersion
                description: "The units associated with this data item\u2019s value,\
                  \ if applicable."
              human_value:
                type: StringVersion
                description: A human-readable formatted value for this data item.
    AdminDimension:
      description: Represents qualitative data about the server.
      content:
        application/json:
          schema:
            type: object
            properties:
              key:
                type: StringVersion
                description: The unique keystring for the requested dimension.
              data:
                type: Array
                description: The data available for the requested dimension.
    AdminDomainAllow:
      description: Represents a domain allowed to federate.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the DomainAllow in the database.
              domain:
                type: StringVersion
                description: The domain that is allowed to federate.
              created_at:
                type: String
                description: When the domain was allowed to federate.
    AdminDomainBlock:
      description: Represents a domain limited from federating.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the DomainBlock in the database.
              domain:
                type: StringVersion
                description: The domain that is not allowed to federate.
              digest:
                type: StringVersion
                description: The sha256 hex digest of the domain that is not allowed
                  to federated.
              created_at:
                type: String
                description: When the domain was blocked from federating.
              severity:
                type: String
                description: The policy to be applied by this domain block.
              reject_media:
                type: BooleanVersion
                description: Whether to reject media attachments from this domain
              reject_reports:
                type: BooleanVersion
                description: Whether to reject reports from this domain
              private_comment:
                type: StringVersion
                description: ''
                nullable: true
              public_comment:
                type: StringVersion
                description: ''
                nullable: true
              obfuscate:
                type: BooleanVersion
                description: Whether to obfuscate public displays of this domain block
    AdminEmailDomainBlock:
      description: Represents an email domain that cannot be used to sign up.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the EmailDomainBlock in the database.
              domain:
                type: StringVersion
                description: The email domain that is not allowed to be used for signups.
              created_at:
                type: String
                description: When the email domain was disallowed from signups.
              history:
                type: Array
                description: Usage statistics for given days (typically the past week).
    AdminIp:
      description: Represents an IP address associated with a user.
      content:
        application/json:
          schema:
            type: object
            properties:
              ip:
                type: String
                description: The IP address.
              used_at:
                type: String
                description: The timestamp of when the IP address was last used for
                  this account.
    AdminIpBlock:
      description: Represents an IP address range that cannot be used to sign up.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the DomainBlock in the database.
              ip:
                type: String
                description: The IP address range that is not allowed to federate.
              severity:
                type: String
                description: The associated policy with this IP block.
              comment:
                type: StringVersion
                description: The recorded reason for this IP block.
              created_at:
                type: String
                description: When the IP block was created.
              expires_at:
                type: String
                description: When the IP block will expire.
                nullable: true
    AdminMeasure:
      description: Represents quantitative data about the server.
      content:
        application/json:
          schema:
            type: object
            properties:
              key:
                type: StringVersion
                description: The unique keystring for the requested measure.
              unit:
                type: String
                description: "The units associated with this data item\u2019s value,\
                  \ if applicable."
                nullable: true
              total:
                type: String
                description: The numeric total associated with the requested measure.
              human_value:
                type: StringVersion
                description: A human-readable formatted value for this data item.
              previous_total:
                type: String
                description: The numeric total associated with the requested measure,
                  in the previous period. Previous period is calculated by subtracting
                  the start_at and end_at dates, then offsetting both start and end
                  dates backwards by the length of the time period.
              data:
                type: Array
                description: The data available for the requested measure, split into
                  daily buckets.
    AdminReport:
      description: Admin-level information about a filed report.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the report in the database.
              action_taken:
                type: BooleanVersion
                description: Whether an action was taken to resolve this report.
              action_taken_at:
                type: String
                description: When an action was taken, if this report is currently
                  resolved.
                nullable: true
              category:
                type: String
                description: The category under which the report is classified.
              comment:
                type: StringVersion
                description: An optional reason for reporting.
              forwarded:
                type: BooleanVersion
                description: Whether a report was forwarded to a remote instance.
              created_at:
                type: String
                description: The time the report was filed.
              updated_at:
                type: String
                description: The time of last action on this report.
              account:
                type: Admin::AccountVersion
                description: The account which filed the report.
              target_account:
                type: Admin::AccountVersion
                description: The account being reported.
              assigned_account:
                type: Admin::Account
                description: The account of the moderator assigned to this report.
                nullable: true
              action_taken_by_account:
                type: Admin::Account
                description: The account of the moderator who handled the report.
                nullable: true
              statuses:
                type: Array
                description: Statuses attached to the report, for context.
              rules:
                type: Array
                description: Rules attached to the report, for context.
    AnnouncementStatus:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of an attached Status in the database.
              url:
                type: String
                description: The URL of an attached Status.
    AnnouncementAccount:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The account ID of the mentioned user.
              username:
                type: StringVersion
                description: The username of the mentioned user.
              url:
                type: String
                description: "The location of the mentioned user\u2019s profile."
              acct:
                type: StringVersion
                description: 'The webfinger acct: URI of the mentioned user. Equivalent
                  to username for local users, or username@domain for remote users.'
    Announcement:
      description: Represents an announcement set by an administrator.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the announcement in the database.
              content:
                type: String
                description: The text of the announcement.
              starts_at:
                type: String
                description: When the announcement will start.
                nullable: true
              ends_at:
                type: String
                description: When the announcement will end.
                nullable: true
              published:
                type: BooleanVersion
                description: Whether the announcement is currently active.
              all_day:
                type: BooleanVersion
                description: Whether the announcement should start and end on dates
                  only instead of datetimes. Will be false if there is no starts_at
                  or ends_at time.
              published_at:
                type: String
                description: When the announcement was published.
              updated_at:
                type: String
                description: When the announcement was last updated.
              read:
                type: BooleanVersion
                description: Whether the announcement has been read by the current
                  user.
              mentions:
                type: Array
                description: Accounts mentioned in the announcement text.
              statuses:
                type: Array
                description: Statuses linked in the announcement text.
              tags:
                type: Array
                description: Tags linked in the announcement text.
              emojis:
                type: Array
                description: Custom emoji used in the announcement text.
              reactions:
                type: Array
                description: Emoji reactions attached to the announcement.
    Appeal:
      description: Appeal against a moderation action.
      content:
        application/json:
          schema:
            type: object
            properties:
              text:
                type: StringVersion
                description: Text of the appeal from the moderated account to the
                  moderators.
              state:
                type: String
                description: State of the appeal.
    CredentialApplication:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              client_id:
                type: StringVersion
                description: Client ID key, to be used for obtaining OAuth tokens
              client_secret:
                type: StringVersion
                description: Client secret key, to be used for obtaining OAuth tokens
              client_secret_expires_at:
                type: StringVersion
                description: When the client secret key will expire at, presently
                  this always returns 0 indicating that OAuth Clients do not expire
    Application:
      description: Represents an application that interfaces with the REST API to
        access accounts or post statuses.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: StringVersion
                description: The name of your application.
              website:
                type: String
                description: The website associated with your application.
                nullable: true
              scopes:
                type: Array
                description: The scopes for your application. This is the registered
                  scopes string split on whitespace.
              redirect_uris:
                type: Array
                description: The registered redirection URI(s) for your application.
              redirect_uri:
                type: StringVersion
                description: The registered redirection URI(s) for your application.May
                  contain \n characters when multiple redirect URIs are registered.
              vapid_key:
                type: StringVersion
                description: Used for Push Streaming API. Returned with POST /api/v1/apps.
                  Equivalent to WebPushSubscription#server_key and Instance#vapid_public_key
    Context:
      description: Represents the tree around a given status. Used for reconstructing
        threads of statuses.
      content:
        application/json:
          schema:
            type: object
            properties:
              ancestors:
                type: Array
                description: Parents in the thread.
              descendants:
                type: Array
                description: Children in the thread.
    Conversation:
      description: Represents a conversation with "direct message" visibility.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the conversation in the database.
              unread:
                type: BooleanVersion
                description: Is the conversation currently marked as unread?
              accounts:
                type: Array
                description: Participants in the conversation.
              last_status:
                type: StatusVersion
                description: The last status in the conversation.
                nullable: true
    CustomEmoji:
      description: Represents a custom emoji.
      content:
        application/json:
          schema:
            type: object
            properties:
              shortcode:
                type: StringVersion
                description: The name of the custom emoji.
              url:
                type: String
                description: A link to the custom emoji.
              static_url:
                type: String
                description: A link to a static copy of the custom emoji.
              visible_in_picker:
                type: BooleanVersion
                description: Whether this Emoji should be visible in the picker or
                  unlisted.
              category:
                type: StringVersion
                description: Used for sorting custom emoji in the picker.
                nullable: true
    DomainBlock:
      description: Represents a domain that is blocked by the instance.
      content:
        application/json:
          schema:
            type: object
            properties:
              domain:
                type: StringVersion
                description: The domain which is blocked. This may be obfuscated or
                  partially censored.
              digest:
                type: String
                description: The SHA256 hash digest of the domain string.
              severity:
                type: String
                description: The level to which the domain is blocked.
              comment:
                type: StringVersion
                description: An optional reason for the domain block.
    Error:
      description: Represents an error message.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: StringVersion
                description: The error message.
              error_description:
                type: StringVersion
                description: A longer description of the error, mainly provided with
                  the OAuth API.
    ExtendedDescription:
      description: Represents an extended description for the instance, to be shown
        on its about page.
      content:
        application/json:
          schema:
            type: object
            properties:
              updated_at:
                type: String
                description: A timestamp of when the extended description was last
                  updated.
              content:
                type: String
                description: The rendered HTML content of the extended description.
    FamiliarFollowers:
      description: Represents a subset of your follows who also follow some other
        user.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the Account in the database.
              accounts:
                type: Array
                description: Accounts you follow that also follow this account.
    FeaturedTag:
      description: Represents a hashtag that is featured on a profile.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The internal ID of the featured tag in the database.
              name:
                type: StringVersion
                description: The name of the hashtag being featured.
              url:
                type: String
                description: A link to all statuses by a user that contain this hashtag.
              statuses_count:
                type: StringVersion
                description: The number of authored statuses containing this hashtag.
              last_status_at:
                type: String
                description: The date of the last authored status containing this
                  hashtag.
    Filter:
      description: Represents a user-defined filter for determining which statuses
        should not be shown to the user.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the Filter in the database.
              title:
                type: StringVersion
                description: A title given by the user to name the filter.
              context:
                type: Array
                description: The contexts in which the filter should be applied.
              expires_at:
                type: String
                description: When the filter should no longer be applied.
                nullable: true
              filter_action:
                type: String
                description: The action to be taken when a status matches this filter.
              keywords:
                type: Array
                description: The keywords grouped under this filter.
              statuses:
                type: Array
                description: The statuses grouped under this filter.
    FilterKeyword:
      description: Represents a keyword that, if matched, should cause the filter
        action to be taken.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the FilterKeyword in the database.
              keyword:
                type: StringVersion
                description: The phrase to be matched against.
              whole_word:
                type: BooleanVersion
                description: Should the filter consider word boundaries? See implementation
                  guidelines for filters.
    FilterResult:
      description: Represents a filter whose keywords matched a given status.
      content:
        application/json:
          schema:
            type: object
            properties:
              filter:
                type: FilterVersion
                description: The filter that was matched.
              keyword_matches:
                type: Array
                description: The keyword within the filter that was matched.
                nullable: true
              status_matches:
                type: Array
                description: The status ID within the filter that was matched.
                nullable: true
    FilterStatus:
      description: Represents a status ID that, if matched, should cause the filter
        action to be taken.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the FilterStatus in the database.
              status_id:
                type: String
                description: The ID of the Status that will be filtered.
    IdentityProof:
      description: Represents a proof from an external identity provider.
      content:
        application/json:
          schema:
            type: object
            properties:
              provider:
                type: StringVersion
                description: The name of the identity provider.
              provider_username:
                type: StringVersion
                description: "The account owner\u2019s username on the identity provider\u2019\
                  s service."
              updated_at:
                type: String
                description: When the identity proof was last updated.
              proof_url:
                type: String
                description: A link to a statement of identity proof, hosted by the
                  identity provider.
              profile_url:
                type: String
                description: "The account owner\u2019s profile URL on the identity\
                  \ provider."
    InstanceIcon:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              src:
                type: String4.3.0
                description: The URL of this icon.
              size:
                type: String
                description: The size of this icon.
    Instance:
      description: Represents the software instance of Mastodon running on this domain.
      content:
        application/json:
          schema:
            type: object
            properties:
              domain:
                type: StringVersion
                description: The domain name of the instance.
              title:
                type: StringVersion
                description: The title of the website.
              version:
                type: StringVersion
                description: The version of Mastodon installed on the instance.
              source_url:
                type: String
                description: The URL for the source code of the software running on
                  this instance, in keeping with AGPL license requirements.
              description:
                type: StringVersion
                description: A short, plain-text description defined by the admin.
              usage:
                type: HashVersion
                description: Usage data for this instance.
              thumbnail:
                type: HashVersion
                description: An image used to represent this instance.
              icon:
                type: Array
                description: The list of available size variants for this instance
                  configured icon.
              languages:
                type: Array
                description: Primary languages of the website and its staff.
              configuration:
                type: HashVersion
                description: Configured values and limits for this website.
              configuration[vapid][public_key]:
                type: StringVersion
                description: The instances VAPID public key, used for push notifications,
                  the same as WebPushSubscription#server_key.
              registrations:
                type: HashVersion
                description: Information about registering for this website.
              api_versions:
                type: HashVersion
                description: Information about which version of the API is implemented
                  by this server. It contains at least a mastodon attribute, and other
                  implementations may have their own additional attributes.
              api_versions[mastodon]:
                type: IntegerVersion
                description: API version number that this server implements. Starting
                  from Mastodon v4.3.0, API changes will come with a version number,
                  which clients can check against this value.
              contact:
                type: HashVersion
                description: Hints related to contacting a representative of the website.
              rules:
                type: Array
                description: An itemized list of rules for this website.
    List:
      description: Represents a list of some users that the authenticated user follows.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The internal database ID of the list.
              title:
                type: StringVersion
                description: The user-defined title of the list.
              replies_policy:
                type: String
                description: Which replies should be shown in the list.
    Marker:
      description: Represents the last read position within a user's timelines.
      content:
        application/json:
          schema:
            type: object
            properties:
              last_read_id:
                type: String
                description: The ID of the most recently viewed entity.
              version:
                type: IntegerVersion
                description: An incrementing counter, used for locking to prevent
                  write conflicts.
              updated_at:
                type: String
                description: The timestamp of when the marker was set.
    MediaAttachment:
      description: Represents a file or media attachment that can be added to a status.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the attachment in the database.
              type:
                type: String
                description: The type of the attachment.
              url:
                type: String
                description: The location of the original full-size attachment.
              preview_url:
                type: String
                description: The location of a scaled-down preview of the attachment.
                nullable: true
              remote_url:
                type: String
                description: The location of the full-size original attachment on
                  the remote website.
                nullable: true
              meta:
                type: HashVersion
                description: Metadata returned by Paperclip.
              description:
                type: String,
                description: Alternate text that describes what is in the media attachment,
                  to be used for the visually impaired or when media attachments do
                  not load.
                nullable: true
              blurhash:
                type: String
                description: A hash computed by the BlurHash algorithm, for generating
                  colorful preview thumbnails when media has not been downloaded yet.
                nullable: true
              text_url:
                type: String
                description: A shorter URL for the attachment.
    Notification:
      description: Represents a notification of an event relevant to the user.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The id of the notification in the database.
              type:
                type: String
                description: The type of event that resulted in the notification.
              group_key:
                type: StringVersion
                description: Group key shared by similar notifications, to be used
                  in the grouped notifications feature. Should be considered opaque,
                  but ungrouped notifications can be assumed to have a group_key of
                  the form ungrouped-{notification_id}.
              created_at:
                type: String
                description: The timestamp of the notification.
              account:
                type: AccountVersion
                description: The account that performed the action that generated
                  the notification.
              status:
                type: StatusVersion
                description: Status that was the object of the notification. Attached
                  when type of the notification is favourite, reblog, status, mention,
                  poll, or update.
              report:
                type: ReportVersion
                description: Report that was the object of the notification. Attached
                  when type of the notification is admin.report.
              relationship_severance_event:
                type: RelationshipSeveranceEventVersion
                description: Summary of the event that caused follow relationships
                  to be severed. Attached when type of the notification is severed_relationships.
              moderation_warning:
                type: AccountWarningVersion
                description: Moderation warning that caused the notification. Attached
                  when type of the notification is moderation_warning.
    NotificationPolicy:
      description: Represents the notification filtering policy of the user.
      content:
        application/json:
          schema:
            type: object
            properties:
              for_not_following:
                type: String
                description: Whether to accept, filter or drop notifications from
                  accounts the user is not following. drop will prevent creation of
                  the notification object altogether (without preventing the underlying
                  activity), filter will cause it to be marked as filtered, and accept
                  will not affect its processing.
              for_not_followers:
                type: String
                description: Whether to accept, filter or drop notifications from
                  accounts that are not following the user. drop will prevent creation
                  of the notification object altogether (without preventing the underlying
                  activity), filter will cause it to be marked as filtered, and accept
                  will not affect its processing.
              for_new_accounts:
                type: String
                description: Whether to accept, filter or drop notifications from
                  accounts created in the past 30 days. drop will prevent creation
                  of the notification object altogether (without preventing the underlying
                  activity), filter will cause it to be marked as filtered, and accept
                  will not affect its processing.
              for_private_mentions:
                type: String
                description: Whether to accept, filter or drop notifications from
                  private mentions. drop will prevent creation of the notification
                  object altogether (without preventing the underlying activity),
                  filter will cause it to be marked as filtered, and accept will not
                  affect its processing. Replies to private mentions initiated by
                  the user, as well as accounts the user follows, are always allowed,
                  regardless of this value.
              for_limited_accounts:
                type: String
                description: Whether to accept, filter or drop notifications from
                  accounts that were limited by a moderator. drop will prevent creation
                  of the notification object altogether (without preventing the underlying
                  activity), filter will cause it to be marked as filtered, and accept
                  will not affect its processing.
              summary:
                type: HashVersion
                description: Summary of the filtered notifications
              summary[pending_requests_count]:
                type: IntegerVersion
                description: Number of different accounts from which the user has
                  non-dismissed filtered notifications. Capped at 100.
              summary[pending_notifications_count]:
                type: IntegerVersion
                description: Number of total non-dismissed filtered notifications.
                  May be inaccurate.
    NotificationRequest:
      description: Represents a group of filtered notifications from a specific user.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The id of the notification request in the database.
              created_at:
                type: String
                description: The timestamp of the notification request, i.e. when
                  the first filtered notification from that user was created.
              updated_at:
                type: String
                description: The timestamp of when the notification request was last
                  updated.
              account:
                type: AccountVersion
                description: The account that performed the action that generated
                  the filtered notifications.
              notifications_count:
                type: StringVersion
                description: "How many of this account\u2019s notifications were filtered."
              last_status:
                type: StatusVersion
                description: Most recent status associated with a filtered notification
                  from that account.
    PollOption:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: StringVersion
                description: The text value of the poll option.
    Poll:
      description: Represents a poll attached to a status.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the poll in the database.
              expires_at:
                type: String
                description: When the poll ends.
                nullable: true
              expired:
                type: BooleanVersion
                description: Is the poll currently expired?
              multiple:
                type: BooleanVersion
                description: Does the poll allow multiple-choice answers?
              votes_count:
                type: IntegerVersion
                description: How many votes have been received.
              voters_count:
                type: Integer,
                description: How many unique accounts have voted on a multiple-choice
                  poll.
                nullable: true
              options:
                type: Array
                description: Possible answers for the poll.
              emojis:
                type: Array
                description: Custom emoji to be used for rendering poll options.
              voted:
                type: BooleanVersion
                description: When called with a user token, has the authorized user
                  voted?
              own_votes:
                type: Array
                description: When called with a user token, which options has the
                  authorized user chosen? Contains an array of index values for options.
    Preferences:
      description: Represents a user's preferences.
      content:
        application/json:
          schema:
            type: object
            properties:
              posting:default:visibility:
                type: String
                description: Default visibility for new posts. Equivalent to CredentialAccount#source[privacy].
              posting:default:sensitive:
                type: BooleanVersion
                description: Default sensitivity flag for new posts. Equivalent to
                  CredentialAccount#source[sensitive].
              posting:default:language:
                type: String
                description: Default language for new posts. Equivalent to CredentialAccount#source[language]
                nullable: true
              reading:expand:media:
                type: String
                description: Whether media attachments should be automatically displayed
                  or blurred/hidden.
              reading:expand:spoilers:
                type: BooleanVersion
                description: Whether CWs should be expanded by default.
    TrendsLink:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              history:
                type: Array
                description: Usage statistics for given days (typically the past week).
    PreviewCard:
      description: Represents a rich preview card that is generated using OpenGraph
        tags from a URL.
      content:
        application/json:
          schema:
            type: object
            properties:
              url:
                type: String
                description: Location of linked resource.
              title:
                type: StringVersion
                description: Title of linked resource.
              description:
                type: StringVersion
                description: Description of preview.
              type:
                type: String
                description: The type of the preview card.
              authors:
                type: Array
                description: Fediverse account of the authors of the original resource.
              author_name:
                type: StringVersion
                description: The author of the original resource. Deprecated since
                  4.3.0, clients should use authors instead.
              author_url:
                type: String
                description: A link to the author of the original resource. Deprecated
                  since 4.3.0, clients should use authors instead.
              provider_name:
                type: StringVersion
                description: The provider of the original resource.
              provider_url:
                type: String
                description: A link to the provider of the original resource.
              html:
                type: String
                description: HTML to be used for generating the preview card.
              width:
                type: IntegerVersion
                description: Width of preview, in pixels.
              height:
                type: IntegerVersion
                description: Width of preview, in pixels.
              image:
                type: String
                description: Preview thumbnail.
                nullable: true
              embed_url:
                type: String
                description: Used for photo embeds, instead of custom html.
              blurhash:
                type: StringVersion
                description: A hash computed by the BlurHash algorithm, for generating
                  colorful preview thumbnails when media has not been downloaded yet.
                nullable: true
    PreviewCardAuthor:
      description: Represents an author in a rich preview card.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: StringVersion
                description: "The original resource author\u2019s name. Replaces the\
                  \ deprecated author_name attribute of the preview card."
              url:
                type: String
                description: A link to the author of the original resource. Replaces
                  the deprecated author_url attribute of the preview card.
              account:
                type: AccountVersion
                description: The fediverse account of the author.
    Reaction:
      description: Represents an emoji reaction to an Announcement.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: StringVersion
                description: "The emoji used for the reaction. Either a unicode emoji,\
                  \ or a custom emoji\u2019s shortcode."
              count:
                type: IntegerVersion
                description: The total number of users who have added this reaction.
              me:
                type: BooleanVersion
                description: 'If there is a currently authorized user: Have you added
                  this reaction?'
              url:
                type: String
                description: 'If the reaction is a custom emoji: A link to the custom
                  emoji.'
              static_url:
                type: String
                description: 'If the reaction is a custom emoji: A link to a non-animated
                  version of the custom emoji.'
    Relationship:
      description: Represents the relationship between accounts, such as following
        / blocking / muting / etc.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The account ID.
              following:
                type: BooleanVersion
                description: Are you following this user?
              showing_reblogs:
                type: BooleanVersion
                description: "Are you receiving this user\u2019s boosts in your home\
                  \ timeline?"
              notifying:
                type: BooleanVersion
                description: Have you enabled notifications for this user?
              languages:
                type: Array
                description: Which languages are you following from this user?
              followed_by:
                type: BooleanVersion
                description: Are you followed by this user?
              blocking:
                type: BooleanVersion
                description: Are you blocking this user?
              blocked_by:
                type: BooleanVersion
                description: Is this user blocking you?
              muting:
                type: BooleanVersion
                description: Are you muting this user?
              muting_notifications:
                type: BooleanVersion
                description: Are you muting notifications from this user?
              requested:
                type: BooleanVersion
                description: Do you have a pending follow request for this user?
              requested_by:
                type: BooleanVersion
                description: Has this user requested to follow you?
              domain_blocking:
                type: BooleanVersion
                description: "Are you blocking this user\u2019s domain?"
              endorsed:
                type: BooleanVersion
                description: Are you featuring this user on your profile?
              note:
                type: StringVersion
                description: "This user\u2019s profile bio"
    RelationshipSeveranceEvent:
      description: Summary of a moderation or block event that caused follow relationships
        to be severed.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the relationship severance event in the database.
              type:
                type: String
                description: Type of event.
              purged:
                type: BooleanVersion
                description: Whether the list of severed relationships is unavailable
                  because the underlying issue has been purged.
              target_name:
                type: StringVersion
                description: Name of the target of the moderation/block event. This
                  is either a domain name or a user handle, depending on the event
                  type.
              followers_count:
                type: IntegerVersion
                description: Number of followers that were removed as result of the
                  event.
              following_count:
                type: IntegerVersion
                description: Number of accounts the user stopped following as result
                  of the event.
              created_at:
                type: String
                description: When the event took place.
    Report:
      description: Reports filed against users and/or statuses, to be taken action
        on by moderators.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the report in the database.
              action_taken:
                type: BooleanVersion
                description: Whether an action was taken yet.
              action_taken_at:
                type: String
                description: When an action was taken against the report.
                nullable: true
              category:
                type: String
                description: The generic reason for the report.
              comment:
                type: StringVersion
                description: The reason for the report.
              forwarded:
                type: BooleanVersion
                description: Whether the report was forwarded to a remote domain.
              created_at:
                type: String
                description: When the report was created.
              status_ids:
                type: Array
                description: IDs of statuses that have been attached to this report
                  for additional context.
                nullable: true
              rule_ids:
                type: Array
                description: IDs of the rules that have been cited as a violation
                  by this report.
                nullable: true
              target_account:
                type: AccountVersion
                description: The account that was reported.
    Role:
      description: Represents a custom user role that grants permissions.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: StringVersion
                description: The ID of the Role in the database.
              name:
                type: StringVersion
                description: The name of the role.
              color:
                type: StringVersion
                description: The hex code assigned to this role. If no hex code is
                  assigned, the string will be empty.
              permissions:
                type: StringVersion
                description: A bitmask that represents the sum of all permissions
                  granted to the role.
              highlighted:
                type: BooleanVersion
                description: Whether the role is publicly visible as a badge on user
                  profiles.
    Rule:
      description: Represents a rule that server users should follow.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: An identifier for the rule.
              text:
                type: StringVersion
                description: The rule to be followed.
              hint:
                type: StringVersion
                description: Longer-form description of the rule.
    ScheduledStatus:
      description: Represents a status that will be published at a future scheduled
        date.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: ID of the scheduled status in the database.
              scheduled_at:
                type: String
                description: The timestamp for when the status will be posted.
              params:
                type: HashVersion
                description: The parameters that were used when scheduling the status,
                  to be used when the status is posted.
              media_attachments:
                type: Array
                description: Media that will be attached when the status is posted.
    Search:
      description: Represents the results of a search.
      content:
        application/json:
          schema:
            type: object
            properties:
              accounts:
                type: Array
                description: Accounts which match the given query
              statuses:
                type: Array
                description: Statuses which match the given query
              hashtags:
                type: Array
                description: Hashtags which match the given query
    StatusTag:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: StringVersion
                description: 'The value of the hashtag after the # sign.'
              url:
                type: String
                description: A link to the hashtag on the instance.
    StatusMention:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The account ID of the mentioned user.
              username:
                type: StringVersion
                description: The username of the mentioned user.
              url:
                type: String
                description: "The location of the mentioned user\u2019s profile."
              acct:
                type: StringVersion
                description: 'The webfinger acct: URI of the mentioned user. Equivalent
                  to username for local users, or username@domain for remote users.'
    Status:
      description: Represents a status posted by an account.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: ID of the status in the database.
              uri:
                type: StringVersion
                description: URI of the status used for federation.
              created_at:
                type: String
                description: The date when this status was created.
              account:
                type: AccountVersion
                description: The account that authored this status.
              content:
                type: String
                description: HTML-encoded status content.
              visibility:
                type: String
                description: Visibility of this status.
              sensitive:
                type: BooleanVersion
                description: Is this status marked as sensitive content?
              spoiler_text:
                type: StringVersion
                description: Subject or summary line, below which status content is
                  collapsed until expanded.
              media_attachments:
                type: Array
                description: Media that is attached to this status.
              application:
                type: HashVersion
                description: The application used to post this status.
              mentions:
                type: Array
                description: Mentions of users within the status content.
              tags:
                type: Array
                description: Hashtags used within the status content.
              emojis:
                type: Array
                description: Custom emoji to be used when rendering status content.
              reblogs_count:
                type: IntegerVersion
                description: How many boosts this status has received.
              favourites_count:
                type: IntegerVersion
                description: How many favourites this status has received.
              replies_count:
                type: IntegerVersion
                description: How many replies this status has received.
              url:
                type: String
                description: "A link to the status\u2019s HTML representation."
                nullable: true
              in_reply_to_id:
                type: String
                description: ID of the status being replied to.
                nullable: true
              in_reply_to_account_id:
                type: String
                description: ID of the account that authored the status being replied
                  to.
                nullable: true
              reblog:
                type: Status
                description: The status being reblogged.
                nullable: true
              poll:
                type: Poll
                description: The poll attached to the status.
                nullable: true
              card:
                type: PreviewCard
                description: Preview card for links included within status content.
                nullable: true
              language:
                type: String
                description: Primary language of this status.
                nullable: true
              text:
                type: String
                description: Plain-text source of a status. Returned instead of content
                  when status is deleted, so the user may redraft from the source
                  text without the client having to reverse-engineer the original
                  text from the HTML content.
                nullable: true
              edited_at:
                type: String
                description: Timestamp of when the status was last edited.
                nullable: true
              favourited:
                type: BooleanVersion
                description: 'If the current token has an authorized user: Have you
                  favourited this status?'
              reblogged:
                type: BooleanVersion
                description: 'If the current token has an authorized user: Have you
                  boosted this status?'
              muted:
                type: BooleanVersion
                description: "If the current token has an authorized user: Have you\
                  \ muted notifications for this status\u2019s conversation?"
              bookmarked:
                type: BooleanVersion
                description: 'If the current token has an authorized user: Have you
                  bookmarked this status?'
              pinned:
                type: BooleanVersion
                description: 'If the current token has an authorized user: Have you
                  pinned this status? Only appears if the status is pinnable.'
              filtered:
                type: Array
                description: 'If the current token has an authorized user: The filter
                  and keywords that matched this status.'
    StatusEdit:
      description: Represents a revision of a status that has been edited.
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: String
                description: The content of the status at this revision.
              spoiler_text:
                type: String
                description: The content of the subject or content warning at this
                  revision.
              sensitive:
                type: BooleanVersion
                description: Whether the status was marked sensitive at this revision.
              created_at:
                type: String
                description: The timestamp of when the revision was published.
              account:
                type: AccountVersion
                description: The account that published this revision.
              poll:
                type: HashVersion
                description: The current state of the poll options at this revision.
                  Note that edits changing the poll options will be collapsed together
                  into one edit, since this action resets the poll.
              media_attachments:
                type: Array
                description: The current state of the media attachments at this revision.
              emojis:
                type: Array
                description: Any custom emoji that are used in the current revision.
    StatusSource:
      description: Represents a status's source as plain text.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: ID of the status in the database.
              text:
                type: StringVersion
                description: The plain text used to compose the status.
              spoiler_text:
                type: StringVersion
                description: "The plain text used to compose the status\u2019s subject\
                  \ or content warning."
    Suggestion:
      description: Represents a suggested account to follow and an associated reason
        for the suggestion.
      content:
        application/json:
          schema:
            type: object
            properties:
              source:
                type: String
                description: The reason this account is being suggested.
              sources:
                type: Array
                description: A list of reasons this account is being suggested. This
                  replaces source
              account:
                type: AccountVersion
                description: The account being recommended to follow.
    AdminTag:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the Tag in the database.
              trendable:
                type: BooleanVersion
                description: Whether the hashtag has been approved to trend.
              usable:
                type: BooleanVersion
                description: Whether the hashtag has not been disabled from auto-linking.
              requires_review:
                type: BooleanVersion
                description: Whether the hashtag has not been reviewed yet to approve
                  or deny its trending.
    Tag:
      description: Represents a hashtag used within the content of a status.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: StringVersion
                description: 'The value of the hashtag after the # sign.'
              url:
                type: String
                description: A link to the hashtag on the instance.
              history:
                type: Array
                description: Usage statistics for given days (typically the past week).
              following:
                type: BooleanVersion
                description: "Whether the current token\u2019s authorized user is\
                  \ following this tag."
    Token:
      description: Represents an OAuth token used for authenticating with the API
        and performing actions.
      content:
        application/json:
          schema:
            type: object
            properties:
              access_token:
                type: StringVersion
                description: An OAuth token to be used for authorization.
              token_type:
                type: StringVersion
                description: The OAuth token type. Mastodon uses Bearer tokens.
              scope:
                type: StringVersion
                description: The OAuth scopes granted by this token, space-separated.
              created_at:
                type: Number
                description: When the token was generated.
    TranslationAttachment:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The id of the attachment.
              description:
                type: StringVersion
                description: The translated description of the attachment.
    TranslationPollOption:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: StringVersion
                description: The translated title of the poll option.
    TranslationPoll:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the poll.
              options:
                type: Array
                description: The translated poll options.
    Translation:
      description: Represents the result of machine translating some status content
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: String
                description: HTML-encoded translated content of the status.
              spoiler_text:
                type: StringVersion
                description: The translated spoiler warning of the status.
              poll:
                type: Translation::PollVersion
                description: The translated poll of the status.
              media_attachments:
                type: Array
                description: The translated media descriptions of the status.
              detected_source_language:
                type: String
                description: The language of the source text, as auto-detected by
                  the machine translation provider.
              provider:
                type: StringVersion
                description: The service that provided the machine translation.
    V1Filter:
      description: Represents a user-defined filter for determining which statuses
        should not be shown to the user. Contains a single keyword or phrase.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the filter in the database.
              phrase:
                type: StringVersion
                description: The text to be filtered.
              context:
                type: Array
                description: The contexts in which the filter should be applied.
              expires_at:
                type: String
                description: When the filter should no longer be applied.
                nullable: true
              irreversible:
                type: BooleanVersion
                description: Should matching entities in home and notifications be
                  dropped by the server? See implementation guidelines for filters.
              whole_word:
                type: BooleanVersion
                description: Should the filter consider word boundaries? See implementation
                  guidelines for filters.
    V1Instance:
      description: Represents the software instance of Mastodon running on this domain.
      content:
        application/json:
          schema:
            type: object
            properties:
              uri:
                type: StringVersion
                description: The domain name of the instance.
              title:
                type: StringVersion
                description: The title of the website.
              short_description:
                type: StringVersion
                description: A short, plain-text description defined by the admin.
              description:
                type: StringVersion
                description: An HTML-permitted description of the Mastodon site.
              email:
                type: StringVersion
                description: An email that may be contacted for any inquiries.
              version:
                type: StringVersion
                description: The version of Mastodon installed on the instance.
              urls:
                type: HashVersion
                description: URLs of interest for clients apps.
              stats:
                type: HashVersion
                description: Statistics about how much information the instance contains.
              thumbnail:
                type: String
                description: Banner image for the website.
                nullable: true
              languages:
                type: Array
                description: Primary languages of the website and its staff.
              registrations:
                type: BooleanVersion
                description: Whether registrations are enabled.
              approval_required:
                type: BooleanVersion
                description: Whether registrations require moderator approval.
              invites_enabled:
                type: BooleanVersion
                description: Whether invites are enabled.
              configuration:
                type: HashVersion
                description: Configured values and limits for this website.
              contact_account:
                type: Account
                description: A user that can be contacted, as an alternative to email.
                nullable: true
              rules:
                type: Array
                description: An itemized list of rules for this website.
    V1NotificationPolicy:
      description: Represents the notification filtering policy of the user.
      content:
        application/json:
          schema:
            type: object
            properties:
              filter_not_following:
                type: BooleanVersion
                description: Whether to filter notifications from accounts the user
                  is not following.
              filter_not_followers:
                type: BooleanVersion
                description: Whether to filter notifications from accounts that are
                  not following the user.
              filter_new_accounts:
                type: BooleanVersion
                description: Whether to filter notifications from accounts created
                  in the past 30 days.
              filter_private_mentions:
                type: BooleanVersion
                description: Whether to filter notifications from private mentions.
                  Replies to private mentions initiated by the user, as well as accounts
                  the user follows, are never filtered.
              summary:
                type: HashVersion
                description: Summary of the filtered notifications
              summary[pending_requests_count]:
                type: IntegerVersion
                description: Number of different accounts from which the user has
                  non-dismissed filtered notifications. Capped at 100.
              summary[pending_notifications_count]:
                type: IntegerVersion
                description: Number of total non-dismissed filtered notifications.
                  May be inaccurate.
    WebPushSubscription:
      description: Represents a subscription to the push streaming server.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: String
                description: The ID of the Web Push subscription in the database.
              endpoint:
                type: String
                description: Where push alerts will be sent to.
              server_key:
                type: StringVersion
                description: "The streaming server\u2019s VAPID key."
              alerts:
                type: HashVersion
                description: Which alerts should be delivered to the endpoint.
  securitySchemes:
    BearerAuth:
      type: http
      description: Bearer token
      scheme: bearer
